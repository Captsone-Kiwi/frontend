{"version":3,"file":"userfront-core.umd.js","sources":["../src/store.js","../src/utils.js","../src/user.js","../src/cookies.js","../src/tokens.js","../src/refresh.js","../src/url.js","../src/signon.js","../src/logout.js","../src/constants.js","../src/mode.js","../src/user.methods.js","../src/index.js"],"sourcesContent":["export const store = {\n  user: {},\n  tokens: {},\n  mode: \"live\",\n};\n","/**\n * This file is for zero-dependency utilities that can\n * be imported by any other file. Don't add any imports\n * to this file other than constants\n */\n\n/**\n * Get the unverified base64 decoded payload of a JWT\n *\n * @param {String} token - JSON Web Token\n * @returns {Object}\n */\nexport function getJWTPayload(token) {\n  try {\n    const encodedPayload = token\n      .split(\".\")[1]\n      .replace(\"-\", \"+\")\n      .replace(\"_\", \"/\");\n    return JSON.parse(atob(encodedPayload));\n  } catch (error) {\n    console.error(\"Problem decoding JWT payload\", error);\n  }\n}\n\nexport function throwFormattedError(error) {\n  if (!error) return;\n  if (typeof error === \"string\") throw new Error(error);\n  if (error?.response?.data?.message) {\n    throw new Error(error.response.data.message);\n  }\n  throw error;\n}\n","import { store } from \"./store.js\";\nimport { getJWTPayload } from \"./utils.js\";\n\n/**\n * Define the store.user object based on the ID token\n */\nexport function setUser() {\n  if (!store.tokens.idToken) {\n    return console.warn(\"Cannot define user: missing ID token\");\n  }\n\n  store.user = store.user || {};\n  const idTokenPayload = getJWTPayload(store.tokens.idToken);\n\n  // Set basic user information properties from ID token\n  const propsToDefine = [\n    \"email\",\n    \"username\",\n    \"name\",\n    \"image\",\n    \"data\",\n    \"confirmedAt\",\n    \"createdAt\",\n    \"updatedAt\",\n    \"mode\",\n    \"userId\",\n    \"userUuid\",\n    \"tenantId\",\n    \"isConfirmed\",\n  ];\n  for (const prop of propsToDefine) {\n    if (prop === \"update\") return;\n    store.user[prop] = idTokenPayload[prop];\n  }\n}\n\n/**\n * Remove all user information\n */\nexport function unsetUser() {\n  for (const attr in store.user) {\n    if (typeof store.user[attr] !== \"function\") {\n      delete store.user[attr];\n    }\n  }\n}\n\n/**\n * Export the store.user object with the update method added\n */\nexport const user = store.user;\n","import Cookies from \"js-cookie\";\nimport { store } from \"./store.js\";\nimport { setTokensFromCookies, unsetTokens } from \"./tokens.js\";\n\n/**\n * Set a cookie value based on the given options.\n * @param {String} value\n * @param {Object} options\n * @param {String} type\n */\nexport function setCookie(value, options, type) {\n  const cookieName = `${type}.${store.tenantId}`;\n  options = options || {\n    secure: store.mode === \"live\",\n    sameSite: \"Lax\",\n  };\n  if (type === \"refresh\") {\n    options.sameSite = \"Strict\";\n  }\n  Cookies.set(cookieName, value, options);\n}\n\n/**\n * Remove a cookie by name, regardless of its cookie setting(s).\n * @param {String} name\n */\nfunction removeCookie(name) {\n  Cookies.remove(name);\n  Cookies.remove(name, { secure: true, sameSite: \"Lax\" });\n  Cookies.remove(name, { secure: true, sameSite: \"None\" });\n  Cookies.remove(name, { secure: false, sameSite: \"Lax\" });\n  Cookies.remove(name, { secure: false, sameSite: \"None\" });\n}\n\n/**\n * Remove all auth cookies (access, id, refresh).\n */\nexport function removeAllCookies() {\n  removeCookie(store.tokens.accessTokenName);\n  removeCookie(store.tokens.idTokenName);\n  removeCookie(store.tokens.refreshTokenName);\n  unsetTokens();\n}\n\n/**\n * Set the cookies from a tokens object, and add to the local store.\n * @param {Object} tokens\n */\nexport function setCookiesAndTokens(tokens) {\n  setCookie(tokens.access.value, tokens.access.cookieOptions, \"access\");\n  setCookie(tokens.id.value, tokens.id.cookieOptions, \"id\");\n  if (tokens.refresh && tokens.refresh.value) {\n    setCookie(tokens.refresh.value, tokens.refresh.cookieOptions, \"refresh\");\n  }\n  setTokensFromCookies();\n}\n","import Cookies from \"js-cookie\";\nimport { store } from \"./store.js\";\nimport { setUser, unsetUser } from \"./user.js\";\nimport { refresh } from \"./refresh.js\";\n\nstore.tokens = store.tokens || {};\nstore.tokens.refresh = refresh;\n\nexport function setTokenNames() {\n  store.tokens = store.tokens || {};\n  store.tokens.accessTokenName = `access.${store.tenantId}`;\n  store.tokens.idTokenName = `id.${store.tenantId}`;\n  store.tokens.refreshTokenName = `refresh.${store.tenantId}`;\n}\n\n/**\n * Set and then return the access token\n */\nexport function accessToken() {\n  store.tokens.accessToken = Cookies.get(store.tokens.accessTokenName);\n  return store.tokens.accessToken;\n}\n\n/**\n * Set and then return the ID token\n */\nexport function idToken() {\n  store.tokens.idToken = Cookies.get(store.tokens.idTokenName);\n  return store.tokens.idToken;\n}\n\n/**\n * Define the store token values from the cookie values.\n */\nexport function setTokensFromCookies() {\n  const tokenNames = [\"access\", \"id\", \"refresh\"];\n  tokenNames.map((tokenName) => {\n    try {\n      const token = Cookies.get(store.tokens[`${tokenName}TokenName`]);\n      store.tokens[`${tokenName}Token`] = token;\n\n      // Set the user object whenever the ID token is set\n      if (tokenName === \"id\" && token) {\n        setUser();\n      }\n    } catch (error) {\n      console.warn(`Problem setting ${tokenName} token.`);\n    }\n  });\n}\n\n/**\n * Set the store token values to undefined\n */\nexport function unsetTokens() {\n  store.tokens.accessToken = undefined;\n  store.tokens.idToken = undefined;\n  store.tokens.refreshToken = undefined;\n  unsetUser();\n}\n\n/**\n * Export the store.tokens object\n */\nexport const tokens = store.tokens;\n\n// NOTE Commenting this out 6/11/21 because the packages it relies on (jsonwebtoken & jwks-rsa)\n// both cause a lot of bloat. If we want to verify tokens, this is a nice way to do it, but\n// we need to find libraries designed for the browser instead of node.\n/**\n * Verify the provided token\n * @param {String} token\n * @returns {Promise<void>} The provided token has been verified if `verifyToken` resolves without error\n */\n// export async function verifyToken(token) {\n//   if (!token) throw new Error(\"Missing token\");\n\n//   let publicKey;\n//   try {\n//     const decodedToken = jwt.decode(token, { complete: true });\n//     if (!decodedToken.header || !decodedToken.header.kid) {\n//       throw new Error(\"Token kid not defined\");\n//     }\n\n//     const client = new JwksClient({\n//       jwksUri: `${apiUrl}tenants/${store.tenantId}/jwks/${store.mode}`,\n//       requestHeaders: { origin: window.location.origin },\n//     });\n\n//     const key = await client.getSigningKey(decodedToken.header.kid);\n//     publicKey = key.getPublicKey();\n//   } catch (error) {\n//     throw error;\n//   }\n\n//   if (!publicKey) {\n//     throw new Error(\"Public key not found\");\n//   }\n\n//   try {\n//     jwt.verify(token, publicKey);\n//   } catch (error) {\n//     throw new Error(\"Token verification failed\");\n//   }\n\n//   return Promise.resolve();\n// }\n","import Cookies from \"js-cookie\";\nimport axios from \"axios\";\nimport { setCookiesAndTokens } from \"./cookies.js\";\nimport { store } from \"./store.js\";\n// import { getIframe, postMessageAsPromise } from \"./iframe.js\";\nimport { throwFormattedError } from \"./utils.js\";\n\n/**\n * Refresh the access and ID tokens\n * - When in test mode, uses the basic refresh method\n * - For tenants without a custom SSL certificate, uses the basic refresh method\n * - For tenants with a custom SSL certificate and in live mode, uses the httpOnly refresh method\n * @returns {Promise}\n */\nexport async function refresh() {\n  try {\n    await basicRefresh();\n  } catch (error) {\n    console.warn(`Refresh failed: ${error.message}`);\n  }\n}\n\n/**\n * Use a regular (non-httpOnly) cookie to refresh the access and ID tokens.\n *\n * The basic refresh method is used automatically in test mode and in live\n * mode whenever an SSL certificate has not been set up.\n */\nasync function basicRefresh() {\n  const refreshToken = Cookies.get(store.tokens.refreshTokenName);\n  try {\n    const { data, status } = await axios.get(`${store.baseUrl}auth/refresh`, {\n      headers: {\n        authorization: `Bearer ${refreshToken}`,\n      },\n    });\n    if (status !== 200) {\n      throw new Error(data.message || \"Problem with request\");\n    }\n    if (data.tokens) {\n      setCookiesAndTokens(data.tokens);\n      return data;\n    } else {\n      throw new Error(\"Problem setting cookies\");\n    }\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n// TODO re-enable httpOnly refresh method once new endpoints are stable [06/15/21]\n/**\n *\n * The httpOnly refresh method is only available for tenants with configured\n * SSL certificates while in live mode.\n */\n// async function httpOnlyRefresh() {\n//   const iframe = getIframe();\n//   if (!iframe) return;\n//   return postMessageAsPromise({\n//     type: \"refresh\",\n//     tenantId: store.tenantId,\n//   });\n// }\n\n/**\n * Use a sessionId and nonce to set the iframe refresh token\n * @param {String} sessionId\n * @param {String} nonce\n * @returns {Promise}\n */\nexport async function exchange({ sessionId, nonce }) {\n  return;\n\n  // TODO re-enable httpOnly exchange method once new endpoints are stable [06/15/21]\n  // --------------------------\n  // const iframe = getIframe();\n  // if (!iframe) return;\n  // return postMessageAsPromise({\n  //   type: \"exchange\",\n  //   tenantId: store.tenantId,\n  //   payload: {\n  //     sessionId,\n  //     nonce,\n  //   },\n  // });\n}\n","import axios from \"axios\";\n\nimport { store } from \"./store.js\";\nimport { removeAllCookies } from \"./cookies.js\";\n\n/**\n * Get the value of a query attribute, e.g. ?attr=value\n * @param {String} attrName\n */\nexport function getQueryAttr(attrName) {\n  if (\n    typeof window !== \"object\" ||\n    typeof window.location !== \"object\" ||\n    !window.location.href ||\n    window.location.href.indexOf(`${attrName}=`) < 0\n  ) {\n    return;\n  }\n  return decodeURIComponent(\n    window.location.href.split(`${attrName}=`)[1].split(\"&\")[0]\n  );\n}\n\n// TODO replace with direct check of the access token.\n/**\n * If the access token is valid, redirect the browser to the\n * tenant's login redirection path (path after login).\n */\nexport async function redirectIfLoggedIn({ redirect } = {}) {\n  if (!store.tokens.accessToken) {\n    return removeAllCookies();\n  }\n\n  // Redirect to a provided path (check options first, then url querystring)\n  if (redirect) {\n    return redirectToPath(redirect);\n  } else if (getQueryAttr(\"redirect\")) {\n    return redirectToPath(getQueryAttr(\"redirect\"));\n  }\n\n  // If no path was provided, look up the path and then redirect there\n  try {\n    const { data } = await axios.get(`${store.baseUrl}self`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n    if (data.tenant && data.tenant.loginRedirectPath) {\n      redirectToPath(data.tenant.loginRedirectPath);\n    }\n  } catch (err) {\n    removeAllCookies();\n  }\n}\n\n/**\n * Redirect to path portion of a URL.\n */\nexport function redirectToPath(pathOrUrl) {\n  // Return if no pathOrUrl, or if SSR or mobile\n  if (\n    !pathOrUrl ||\n    typeof document !== \"object\" ||\n    typeof window !== \"object\"\n  ) {\n    return;\n  }\n  try {\n    document && window;\n  } catch (error) {\n    return;\n  }\n\n  // Perform hard redirect\n  const el = document.createElement(\"a\");\n  el.href = pathOrUrl;\n  let path = `${el.pathname}${el.hash}${el.search}`;\n  if (el.pathname !== window.location.pathname) {\n    window.location.assign(path);\n  }\n}\n","import axios from \"axios\";\nimport { setCookiesAndTokens } from \"./cookies.js\";\nimport { store } from \"./store.js\";\nimport { getQueryAttr, redirectToPath } from \"./url.js\";\nimport { exchange } from \"./refresh.js\";\nimport { throwFormattedError } from \"./utils.js\";\n\n/**\n * This file has methods for signing up and logging in\n */\n\n/**\n * Register a user via the provided method. This method serves to call other\n * methods, depending on the \"method\" parameter passed in.\n * @param {String} method\n * @param {String} username\n * @param {String} name\n * @param {String} email\n * @param {String} password\n * @param {Object} data - Object for custom user fields\n * @param {String} redirect - path to redirect to, or if false, do not redirect\n */\nexport async function signup({\n  method,\n  username,\n  name,\n  email,\n  password,\n  data,\n  redirect,\n} = {}) {\n  if (!method) {\n    throw new Error('Userfront.signup called without \"method\" property.');\n  }\n  switch (method) {\n    case \"azure\":\n    case \"facebook\":\n    case \"github\":\n    case \"google\":\n    case \"linkedin\":\n      return signupWithSSO({ provider: method, redirect });\n    case \"password\":\n      return signupWithPassword({\n        username,\n        name,\n        email,\n        password,\n        userData: data,\n        redirect,\n      });\n    case \"passwordless\":\n      return sendPasswordlessLink({ email, name, username, userData: data });\n    default:\n      throw new Error(\n        'Userfront.signup called with invalid \"method\" property.'\n      );\n  }\n}\n\n/**\n * Register a new user in via SSO provider.\n * Redirect the browser after successful authentication and 302 redirect from server.\n * @param {String} provider Name of SSO provider\n */\nfunction signupWithSSO({ provider, redirect }) {\n  if (!provider) throw new Error(\"Missing provider\");\n  const url = getProviderLink({ provider, redirect });\n  window.location.assign(url);\n}\n\n/**\n * Register a new user with username, name, email, and password.\n * Redirect the browser after successful signup based on the redirectTo value returned.\n * @param {String} username\n * @param {String} name\n * @param {String} email\n * @param {String} password\n * @param {Object} userData - alias for the user.data object, since \"data\" is used in the response\n * @param {String} redirect - do not redirect if false, or redirect to a specific path\n */\nasync function signupWithPassword({\n  username,\n  name,\n  email,\n  password,\n  userData,\n  redirect,\n} = {}) {\n  try {\n    const { data } = await axios.post(`${store.baseUrl}auth/create`, {\n      tenantId: store.tenantId,\n      username,\n      name,\n      email,\n      password,\n      data: userData,\n    });\n    if (data.tokens) {\n      setCookiesAndTokens(data.tokens);\n      await exchange(data);\n      if (redirect === false) return data;\n      redirectToPath(\n        redirect || getQueryAttr(\"redirect\") || data.redirectTo || \"/\"\n      );\n      return data;\n    } else {\n      throw new Error(\"Please try again.\");\n    }\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Log a user in via the provided method. This method serves to call other\n * methods, depending on the \"method\" parameter passed in.\n * @param {String} method\n * @param {String} email\n * @param {String} username\n * @param {String} emailOrUsername\n * @param {String} password\n * @param {String} token\n * @param {String} uuid\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport async function login({\n  method,\n  email,\n  username,\n  emailOrUsername,\n  password,\n  token,\n  uuid,\n  redirect,\n} = {}) {\n  if (!method) {\n    throw new Error('Userfront.login called without \"method\" property.');\n  }\n  switch (method) {\n    case \"azure\":\n    case \"facebook\":\n    case \"github\":\n    case \"google\":\n    case \"linkedin\":\n      return loginWithSSO({ provider: method, redirect });\n    case \"password\":\n      return loginWithPassword({\n        email,\n        username,\n        emailOrUsername,\n        password,\n        redirect,\n      });\n    case \"passwordless\":\n      return sendPasswordlessLink({ email });\n    case \"link\":\n      return loginWithLink({ token, uuid, redirect });\n    case \"saml\":\n      return completeSamlLogin();\n    default:\n      throw new Error('Userfront.login called with invalid \"method\" property.');\n  }\n}\n\n/**\n * Log a user in via SSO provider.\n * Redirect the browser after successful authentication and 302 redirect from server.\n * @param {String} provider Name of SSO provider\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nfunction loginWithSSO({ provider, redirect }) {\n  if (!provider) throw new Error(\"Missing provider\");\n  const url = getProviderLink({ provider, redirect });\n  window.location.assign(url);\n}\n\nexport function getProviderLink({ provider, redirect }) {\n  if (!provider) throw new Error(\"Missing provider\");\n  if (!store.tenantId) throw new Error(\"Missing tenant ID\");\n\n  let url = `${store.baseUrl}auth/${provider}/login?tenant_id=${store.tenantId}&origin=${window.location.origin}`;\n\n  let redirectTo = redirect || getQueryAttr(\"redirect\");\n  if (redirect === false) {\n    redirectTo = typeof document === \"object\" && document.location.pathname;\n  }\n  if (redirectTo) {\n    url += `&redirect=${encodeURIComponent(redirectTo)}`;\n  }\n\n  return url;\n}\n\n/**\n * Log a user in with email/username and password.\n * Redirect the browser after successful login based on the redirectTo value returned.\n * @param {Object} options\n */\nasync function loginWithPassword({\n  email,\n  username,\n  emailOrUsername,\n  password,\n  redirect,\n}) {\n  try {\n    const { data } = await axios.post(`${store.baseUrl}auth/basic`, {\n      tenantId: store.tenantId,\n      emailOrUsername: email || username || emailOrUsername,\n      password,\n    });\n    if (data.tokens) {\n      setCookiesAndTokens(data.tokens);\n      await exchange(data);\n      if (redirect === false) return data;\n      redirectToPath(\n        redirect || getQueryAttr(\"redirect\") || data.redirectTo || \"/\"\n      );\n      return data;\n    } else {\n      throw new Error(\"Please try again.\");\n    }\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\nasync function completeSamlLogin() {\n  try {\n    if (!store.tokens.accessToken) {\n      return console.warn(\"Cannot complete SAML login without access token\");\n    }\n\n    const { data } = await axios.get(`${store.baseUrl}auth/saml/idp/token`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n\n    window.location.assign(\n      `${store.baseUrl}auth/saml/idp/login?tenant_id=${store.tenantId}&token=${data.token}&uuid=${store.user.userUuid}`\n    );\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Log a user in with a token/uuid combo passed into the function or\n * in the URL querystring. ?token=...&uuid=...\n * @param {String} token\n * @param {UUID} uuid\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport async function loginWithLink({ token, uuid, redirect } = {}) {\n  try {\n    token = token || getQueryAttr(\"token\");\n    uuid = uuid || getQueryAttr(\"uuid\");\n    if (!token || !uuid) return;\n\n    const { data } = await axios.put(`${store.baseUrl}auth/link`, {\n      token,\n      uuid,\n      tenantId: store.tenantId,\n    });\n\n    if (data.tokens) {\n      setCookiesAndTokens(data.tokens);\n      await exchange(data);\n      if (redirect === false) return data;\n      redirectToPath(\n        redirect || getQueryAttr(\"redirect\") || data.redirectTo || \"/\"\n      );\n      return data;\n    } else {\n      throw new Error(\"Problem logging in.\");\n    }\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Send a login link to the provided email.\n * @param {String} email\n */\nexport async function sendLoginLink(email) {\n  try {\n    const { data } = await axios.post(`${store.baseUrl}auth/link`, {\n      email,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Create or update a user and send them a link to log in.\n * @param {Object} inputs\n */\nexport async function sendPasswordlessLink({\n  email,\n  name,\n  username,\n  userData,\n  options,\n}) {\n  try {\n    const { data } = await axios.post(`${store.baseUrl}auth/link`, {\n      email,\n      name,\n      username,\n      data: userData,\n      options,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Send a password reset link to the provided email.\n * @param {String} email\n */\nexport async function sendResetLink(email) {\n  try {\n    const { data } = await axios.post(`${store.baseUrl}auth/reset/link`, {\n      email,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\nexport async function resetPassword({ uuid, token, password, redirect }) {\n  try {\n    token = token || getQueryAttr(\"token\");\n    uuid = uuid || getQueryAttr(\"uuid\");\n    if (!token || !uuid) throw new Error(\"Missing token or uuid\");\n    const { data } = await axios.put(`${store.baseUrl}auth/reset`, {\n      tenantId: store.tenantId,\n      uuid,\n      token,\n      password,\n    });\n    if (data.tokens) {\n      setCookiesAndTokens(data.tokens);\n\n      // Return if redirect is explicitly false\n      if (redirect === false) return data;\n\n      redirectToPath(\n        redirect || getQueryAttr(\"redirect\") || data.redirectTo || \"/\"\n      );\n\n      return data;\n    } else {\n      throw new Error(\n        \"There was a problem resetting your password. Please try again.\"\n      );\n    }\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import axios from \"axios\";\n\nimport { getIframe, postMessageAsPromise } from \"./iframe.js\";\nimport { store } from \"./store.js\";\nimport { removeAllCookies } from \"./cookies.js\";\nimport { setTokensFromCookies } from \"./tokens.js\";\nimport { redirectToPath } from \"./url\";\nimport { throwFormattedError } from \"./utils.js\";\n\n/**\n * Log a user out and redirect to the logout path.\n */\nexport async function logout({ method, redirect } = {}) {\n  if (method === \"saml\") {\n    return completeSamlLogout();\n  }\n  if (!store.tokens.accessToken) {\n    return removeAllCookies();\n  }\n\n  try {\n    const { data } = await axios.get(`${store.baseUrl}auth/logout`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n    removeAllCookies();\n    if (redirect === false) return;\n    redirectToPath(redirect || data.redirectTo);\n  } catch (err) {\n    removeAllCookies();\n  }\n}\n\nasync function completeSamlLogout() {\n  if (!store.tokens.accessToken) {\n    throw new Error(\"Please log in to authorize your logout request.\");\n  }\n\n  try {\n    const { data } = await axios.get(`${store.baseUrl}auth/saml/idp/token`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n\n    window.location.assign(\n      `${store.baseUrl}auth/saml/idp/logout?tenant_id=${store.tenantId}&token=${data.token}&uuid=${store.user.userUuid}`\n    );\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n// TODO re-enable exchange method once new endpoints are stable [06/15/21]\n// --------------------------\n// const iframe = getIframe();\n// if (!iframe) return;\n// try {\n//   const { data } = await postMessageAsPromise({\n//     type: \"logout\",\n//     tenantId: store.tenantId,\n//   });\n//   removeAllCookies();\n//   setTokensFromCookies();\n//   redirectToPath(data.redirectTo || \"/\");\n// } catch (error) {\n//   removeAllCookies();\n//   redirectToPath(\"/\");\n// }\n","export const apiUrl = `https://api.userfront.com/v0/`;\n\nexport const privateIPRegex =\n  /((^127\\.)|(^10\\.)|(^172\\.1[6-9]\\.)|(^172\\.2[0-9]\\.)|(^172\\.3[0-1]\\.)|(^192\\.168\\.))\\d{1,3}\\.\\d{1,3}/g;\n","import axios from \"axios\";\nimport { privateIPRegex } from \"./constants.js\";\nimport { store } from \"./store.js\";\n\n/**\n * Global mode object\n */\nexport const mode = {\n  value: \"live\",\n  reason: undefined,\n  setMode,\n};\n\nsetModeSync();\n\n/**\n * Determine whether a hostname is in test mode.\n * @param {String} hn\n */\nexport function isTestHostname(hn) {\n  try {\n    const hostname = hn || window.location.hostname;\n    return !!(hostname.match(/localhost/g) || hostname.match(privateIPRegex));\n  } catch (err) {\n    return true;\n  }\n}\n\nexport function isHttps() {\n  try {\n    return window.location.protocol === \"https:\";\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Define the mode of operation (live or test)\n */\nexport async function setMode() {\n  try {\n    const { data } = await axios.get(\n      `${store.baseUrl}tenants/${store.tenantId}/mode`\n    );\n    mode.value = data.mode || \"test\";\n    mode.reason = getReason(mode.value);\n    store.mode = mode.value;\n  } catch (err) {\n    mode.value = \"test\";\n    store.mode = mode.value;\n  }\n}\n\n/**\n * Estimate the mode without making an API call\n */\nexport function setModeSync() {\n  const modeValue = isTestHostname() || !isHttps() ? \"test\" : \"live\";\n  mode.value = modeValue;\n  mode.reason = getReason(modeValue);\n  store.mode = modeValue;\n}\n\n/**\n * Set the reason for the mode\n * - http\n * - domain\n */\nfunction getReason(mode) {\n  try {\n    if (mode === \"live\") {\n      return \"domain\";\n    }\n    if (window.location.protocol === \"http:\") {\n      return \"http\";\n    } else if (window.location.protocol !== \"https:\") {\n      return \"protocol\";\n    } else {\n      return \"domain\";\n    }\n  } catch (error) {}\n}\n","/**\n * user methods are refactored into a separate file to avoid a circular dependency\n * between Userfront.refresh() [which requires setUser()]\n * and Userfront.user.update() [which requires refresh()].\n */\n\nimport axios from \"axios\";\nimport { refresh } from \"./refresh.js\";\nimport { store } from \"./store.js\";\nimport { getJWTPayload } from \"./utils.js\";\n\n/**\n * Update the user record on Userfront\n * @param {Object} payload User properties to update e.g. { name: 'John Doe' }\n */\nexport async function update(payload) {\n  if (!payload || Object.keys(payload).length < 1) {\n    return console.warn(\"Missing user properties to update\");\n  }\n\n  // Make request to update the user\n  await axios.put(`${store.baseUrl}self`, payload, {\n    headers: {\n      authorization: `Bearer ${store.tokens.accessToken}`,\n    },\n  });\n\n  // Refresh the access and ID tokens, and set the store.user object from the ID token\n  await refresh();\n\n  return store.user;\n}\n\n/**\n * Determine whether the access token has a given role\n * @param {String} roleName\n * @param {Object} options\n * @returns {Boolean}\n */\nexport function hasRole(roleName, { tenantId } = {}) {\n  try {\n    if (!store.tokens.accessToken || !store.tenantId) {\n      return false;\n    }\n    const { authorization } = getJWTPayload(store.tokens.accessToken);\n    if (!authorization) {\n      return false;\n    }\n    tenantId = tenantId || store.tenantId;\n    if (!authorization[tenantId] || !authorization[tenantId].roles) {\n      return false;\n    }\n    return authorization[tenantId].roles.indexOf(roleName) > -1;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Add the methods to the store.user object\n */\nstore.user.update = update;\nstore.user.hasRole = hasRole;\n","import axios from \"axios\";\nimport { store } from \"./store.js\";\nimport {\n  tokens,\n  accessToken,\n  idToken,\n  setTokensFromCookies,\n  setTokenNames,\n} from \"./tokens\";\nimport { redirectIfLoggedIn } from \"./url.js\";\nimport {\n  login,\n  resetPassword,\n  sendLoginLink,\n  sendResetLink,\n  signup,\n} from \"./signon.js\";\nimport { logout } from \"./logout.js\";\nimport { mode, setMode, setModeSync } from \"./mode.js\";\n// import { setIframe } from \"./iframe.js\";\nimport { user } from \"./user.js\";\nimport \"./user.methods.js\";\nimport { refresh } from \"./refresh.js\";\nimport { apiUrl } from \"./constants.js\";\n\nlet initCallbacks = [];\n\n/**\n * Initialize the Userfront library.\n * @param {String} tenantId\n */\nfunction init(tenantId, opts = {}) {\n  if (!tenantId) return console.warn(\"Userfront initialized without tenant ID\");\n\n  store.tenantId = tenantId;\n\n  store.baseUrl = opts.baseUrl || apiUrl;\n  if (!store.baseUrl.endsWith(\"/\")) {\n    store.baseUrl += \"/\";\n  }\n\n  if (opts.domain) {\n    store.domain = opts.domain;\n    axios.defaults.headers.common[\n      \"x-application-id\"\n    ] = `https://${store.domain}`;\n  }\n\n  setTokenNames();\n  // setIframe(); // TODO re-enable when iframe is needed\n  setTokensFromCookies();\n  setModeSync();\n\n  try {\n    if (initCallbacks.length > 0) {\n      initCallbacks.forEach((cb) => {\n        if (!cb || typeof cb !== \"function\") return;\n        cb({ tenantId });\n      });\n    }\n    initCallbacks = [];\n  } catch (error) {}\n}\n\n/**\n * Add a callback function to be called upon Userfront.init()\n * @param {Function} cb\n */\nfunction addInitCallback(cb) {\n  if (!cb || typeof cb !== \"function\") return;\n  initCallbacks.push(cb);\n}\n\n/**\n\n * Register a window-level event called \"urlchanged\" that will fire\n * whenever the browser URL changes.\n */\nlet isRegistered = false;\nfunction registerUrlChangedEventListener() {\n  if (isRegistered) return;\n  isRegistered = true;\n  try {\n    history.pushState = ((f) =>\n      function pushState() {\n        var ret = f.apply(this, arguments);\n        window.dispatchEvent(new Event(\"pushstate\"));\n        window.dispatchEvent(new Event(\"urlchanged\"));\n        return ret;\n      })(history.pushState);\n\n    history.replaceState = ((f) =>\n      function replaceState() {\n        var ret = f.apply(this, arguments);\n        window.dispatchEvent(new Event(\"replacestate\"));\n        window.dispatchEvent(new Event(\"urlchanged\"));\n        return ret;\n      })(history.replaceState);\n\n    window.addEventListener(\"popstate\", () => {\n      window.dispatchEvent(new Event(\"urlchanged\"));\n    });\n  } catch (error) {}\n}\n\n/**\n * EXPORTS\n */\n\nexport default {\n  // index\n  addInitCallback,\n  init,\n  registerUrlChangedEventListener,\n\n  //logout\n  logout,\n\n  // mode\n  mode,\n  setMode,\n\n  // refresh\n  refresh: (a, b, c) => {\n    try {\n      console.warn(\n        \"Userfront.refresh() is deprecated and will be removed. Please use Userfront.tokens.refresh() instead.\"\n      );\n    } catch (error) {}\n    return refresh(a, b, c);\n  },\n\n  // signon\n  login,\n  resetPassword,\n  sendLoginLink,\n  sendResetLink,\n  signup,\n\n  // store\n  store,\n\n  // tokens\n  tokens,\n  accessToken,\n  idToken,\n\n  // url\n  redirectIfLoggedIn,\n\n  // user\n  user,\n\n  // utils\n};\n"],"names":["store","user","tokens","mode","getJWTPayload","token","encodedPayload","split","replace","JSON","parse","atob","error","console","throwFormattedError","Error","response","_error$response","data","_error$response$data","message","setCookie","value","options","type","cookieName","tenantId","secure","sameSite","Cookies","set","removeCookie","name","remove","removeAllCookies","accessTokenName","idTokenName","refreshTokenName","accessToken","undefined","idToken","refreshToken","attr","unsetUser","setCookiesAndTokens","access","cookieOptions","id","refresh","setTokensFromCookies","body","recover","result","e","then","exchange","get","axios","baseUrl","headers","authorization","status","basicRefresh","warn","map","tokenName","idTokenPayload","propsToDefine","prop","setUser","getQueryAttr","attrName","window","location","href","indexOf","decodeURIComponent","redirectToPath","pathOrUrl","document","el","createElement","pathname","assign","hash","search","sendPasswordlessLink","email","username","userData","post","getProviderLink","provider","redirect","url","origin","redirectTo","encodeURIComponent","privateIPRegex","setMode","reason","getReason","setModeSync","modeValue","hn","hostname","match","err","isTestHostname","protocol","isHttps","update","payload","Object","keys","length","put","hasRole","roleName","roles","initCallbacks","isRegistered","addInitCallback","cb","push","init","opts","endsWith","domain","defaults","common","forEach","registerUrlChangedEventListener","history","pushState","f","ret","apply","this","arguments","dispatchEvent","Event","replaceState","addEventListener","logout","method","userUuid","completeSamlLogout","a","b","c","login","emailOrUsername","password","uuid","loginWithSSO","loginWithPassword","loginWithLink","completeSamlLogin","resetPassword","sendLoginLink","sendResetLink","signup","signupWithSSO","signupWithPassword","redirectIfLoggedIn","tenant","loginRedirectPath"],"mappings":"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"}