{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isCreditCard;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* eslint-disable max-len */\n\n\nvar creditCard = /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11}|62[0-9]{14})$/;\n/* eslint-enable max-len */\n\nfunction isCreditCard(str) {\n  (0, _assertString2.default)(str);\n  var sanitized = str.replace(/[- ]+/g, '');\n\n  if (!creditCard.test(sanitized)) {\n    return false;\n  }\n\n  var sum = 0;\n  var digit = void 0;\n  var tmpNum = void 0;\n  var shouldDouble = void 0;\n\n  for (var i = sanitized.length - 1; i >= 0; i--) {\n    digit = sanitized.substring(i, i + 1);\n    tmpNum = parseInt(digit, 10);\n\n    if (shouldDouble) {\n      tmpNum *= 2;\n\n      if (tmpNum >= 10) {\n        sum += tmpNum % 10 + 1;\n      } else {\n        sum += tmpNum;\n      }\n    } else {\n      sum += tmpNum;\n    }\n\n    shouldDouble = !shouldDouble;\n  }\n\n  return !!(sum % 10 === 0 ? sanitized : false);\n}\n\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/Users/100s/Documents/GitHub/frontend/node_modules/validator/lib/isCreditCard.js"],"names":["Object","defineProperty","exports","value","default","isCreditCard","_assertString","require","_assertString2","_interopRequireDefault","obj","__esModule","creditCard","str","sanitized","replace","test","sum","digit","tmpNum","shouldDouble","i","length","substring","parseInt","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,YAAlB;;AAEA,IAAIC,aAAa,GAAGC,OAAO,CAAC,qBAAD,CAA3B;;AAEA,IAAIC,cAAc,GAAGC,sBAAsB,CAACH,aAAD,CAA3C;;AAEA,SAASG,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEN,IAAAA,OAAO,EAAEM;AAAX,GAArC;AAAwD;AAE/F;;;AACA,IAAIE,UAAU,GAAG,oOAAjB;AACA;;AAEA,SAASP,YAAT,CAAsBQ,GAAtB,EAA2B;AACzB,GAAC,GAAGL,cAAc,CAACJ,OAAnB,EAA4BS,GAA5B;AACA,MAAIC,SAAS,GAAGD,GAAG,CAACE,OAAJ,CAAY,QAAZ,EAAsB,EAAtB,CAAhB;;AACA,MAAI,CAACH,UAAU,CAACI,IAAX,CAAgBF,SAAhB,CAAL,EAAiC;AAC/B,WAAO,KAAP;AACD;;AACD,MAAIG,GAAG,GAAG,CAAV;AACA,MAAIC,KAAK,GAAG,KAAK,CAAjB;AACA,MAAIC,MAAM,GAAG,KAAK,CAAlB;AACA,MAAIC,YAAY,GAAG,KAAK,CAAxB;;AACA,OAAK,IAAIC,CAAC,GAAGP,SAAS,CAACQ,MAAV,GAAmB,CAAhC,EAAmCD,CAAC,IAAI,CAAxC,EAA2CA,CAAC,EAA5C,EAAgD;AAC9CH,IAAAA,KAAK,GAAGJ,SAAS,CAACS,SAAV,CAAoBF,CAApB,EAAuBA,CAAC,GAAG,CAA3B,CAAR;AACAF,IAAAA,MAAM,GAAGK,QAAQ,CAACN,KAAD,EAAQ,EAAR,CAAjB;;AACA,QAAIE,YAAJ,EAAkB;AAChBD,MAAAA,MAAM,IAAI,CAAV;;AACA,UAAIA,MAAM,IAAI,EAAd,EAAkB;AAChBF,QAAAA,GAAG,IAAIE,MAAM,GAAG,EAAT,GAAc,CAArB;AACD,OAFD,MAEO;AACLF,QAAAA,GAAG,IAAIE,MAAP;AACD;AACF,KAPD,MAOO;AACLF,MAAAA,GAAG,IAAIE,MAAP;AACD;;AACDC,IAAAA,YAAY,GAAG,CAACA,YAAhB;AACD;;AACD,SAAO,CAAC,EAAEH,GAAG,GAAG,EAAN,KAAa,CAAb,GAAiBH,SAAjB,GAA6B,KAA/B,CAAR;AACD;;AACDW,MAAM,CAACvB,OAAP,GAAiBA,OAAO,CAAC,SAAD,CAAxB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isCreditCard;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable max-len */\nvar creditCard = /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11}|62[0-9]{14})$/;\n/* eslint-enable max-len */\n\nfunction isCreditCard(str) {\n  (0, _assertString2.default)(str);\n  var sanitized = str.replace(/[- ]+/g, '');\n  if (!creditCard.test(sanitized)) {\n    return false;\n  }\n  var sum = 0;\n  var digit = void 0;\n  var tmpNum = void 0;\n  var shouldDouble = void 0;\n  for (var i = sanitized.length - 1; i >= 0; i--) {\n    digit = sanitized.substring(i, i + 1);\n    tmpNum = parseInt(digit, 10);\n    if (shouldDouble) {\n      tmpNum *= 2;\n      if (tmpNum >= 10) {\n        sum += tmpNum % 10 + 1;\n      } else {\n        sum += tmpNum;\n      }\n    } else {\n      sum += tmpNum;\n    }\n    shouldDouble = !shouldDouble;\n  }\n  return !!(sum % 10 === 0 ? sanitized : false);\n}\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}