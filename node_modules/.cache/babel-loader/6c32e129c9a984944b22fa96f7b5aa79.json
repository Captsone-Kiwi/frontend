{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isISSN;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar issn = '^\\\\d{4}-?\\\\d{3}[\\\\dX]$';\n\nfunction isISSN(str) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (0, _assertString2.default)(str);\n  var testIssn = issn;\n  testIssn = options.require_hyphen ? testIssn.replace('?', '') : testIssn;\n  testIssn = options.case_sensitive ? new RegExp(testIssn) : new RegExp(testIssn, 'i');\n\n  if (!testIssn.test(str)) {\n    return false;\n  }\n\n  var issnDigits = str.replace('-', '');\n  var position = 8;\n  var checksum = 0;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = issnDigits[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var digit = _step.value;\n      var digitValue = digit.toUpperCase() === 'X' ? 10 : +digit;\n      checksum += digitValue * position;\n      --position;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return checksum % 11 === 0;\n}\n\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/Users/100s/Documents/GitHub/frontend/node_modules/validator/lib/isISSN.js"],"names":["Object","defineProperty","exports","value","default","isISSN","_assertString","require","_assertString2","_interopRequireDefault","obj","__esModule","issn","str","options","arguments","length","undefined","testIssn","require_hyphen","replace","case_sensitive","RegExp","test","issnDigits","position","checksum","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","Symbol","iterator","_step","next","done","digit","digitValue","toUpperCase","err","return","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,MAAlB;;AAEA,IAAIC,aAAa,GAAGC,OAAO,CAAC,qBAAD,CAA3B;;AAEA,IAAIC,cAAc,GAAGC,sBAAsB,CAACH,aAAD,CAA3C;;AAEA,SAASG,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEN,IAAAA,OAAO,EAAEM;AAAX,GAArC;AAAwD;;AAE/F,IAAIE,IAAI,GAAG,wBAAX;;AAEA,SAASP,MAAT,CAAgBQ,GAAhB,EAAqB;AACnB,MAAIC,OAAO,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;AAEA,GAAC,GAAGP,cAAc,CAACJ,OAAnB,EAA4BS,GAA5B;AACA,MAAIK,QAAQ,GAAGN,IAAf;AACAM,EAAAA,QAAQ,GAAGJ,OAAO,CAACK,cAAR,GAAyBD,QAAQ,CAACE,OAAT,CAAiB,GAAjB,EAAsB,EAAtB,CAAzB,GAAqDF,QAAhE;AACAA,EAAAA,QAAQ,GAAGJ,OAAO,CAACO,cAAR,GAAyB,IAAIC,MAAJ,CAAWJ,QAAX,CAAzB,GAAgD,IAAII,MAAJ,CAAWJ,QAAX,EAAqB,GAArB,CAA3D;;AACA,MAAI,CAACA,QAAQ,CAACK,IAAT,CAAcV,GAAd,CAAL,EAAyB;AACvB,WAAO,KAAP;AACD;;AACD,MAAIW,UAAU,GAAGX,GAAG,CAACO,OAAJ,CAAY,GAAZ,EAAiB,EAAjB,CAAjB;AACA,MAAIK,QAAQ,GAAG,CAAf;AACA,MAAIC,QAAQ,GAAG,CAAf;AACA,MAAIC,yBAAyB,GAAG,IAAhC;AACA,MAAIC,iBAAiB,GAAG,KAAxB;AACA,MAAIC,cAAc,GAAGZ,SAArB;;AAEA,MAAI;AACF,SAAK,IAAIa,SAAS,GAAGN,UAAU,CAACO,MAAM,CAACC,QAAR,CAAV,EAAhB,EAA+CC,KAApD,EAA2D,EAAEN,yBAAyB,GAAG,CAACM,KAAK,GAAGH,SAAS,CAACI,IAAV,EAAT,EAA2BC,IAAzD,CAA3D,EAA2HR,yBAAyB,GAAG,IAAvJ,EAA6J;AAC3J,UAAIS,KAAK,GAAGH,KAAK,CAAC9B,KAAlB;AAEA,UAAIkC,UAAU,GAAGD,KAAK,CAACE,WAAN,OAAwB,GAAxB,GAA8B,EAA9B,GAAmC,CAACF,KAArD;AACAV,MAAAA,QAAQ,IAAIW,UAAU,GAAGZ,QAAzB;AACA,QAAEA,QAAF;AACD;AACF,GARD,CAQE,OAAOc,GAAP,EAAY;AACZX,IAAAA,iBAAiB,GAAG,IAApB;AACAC,IAAAA,cAAc,GAAGU,GAAjB;AACD,GAXD,SAWU;AACR,QAAI;AACF,UAAI,CAACZ,yBAAD,IAA8BG,SAAS,CAACU,MAA5C,EAAoD;AAClDV,QAAAA,SAAS,CAACU,MAAV;AACD;AACF,KAJD,SAIU;AACR,UAAIZ,iBAAJ,EAAuB;AACrB,cAAMC,cAAN;AACD;AACF;AACF;;AAED,SAAOH,QAAQ,GAAG,EAAX,KAAkB,CAAzB;AACD;;AACDe,MAAM,CAACvC,OAAP,GAAiBA,OAAO,CAAC,SAAD,CAAxB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isISSN;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar issn = '^\\\\d{4}-?\\\\d{3}[\\\\dX]$';\n\nfunction isISSN(str) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  (0, _assertString2.default)(str);\n  var testIssn = issn;\n  testIssn = options.require_hyphen ? testIssn.replace('?', '') : testIssn;\n  testIssn = options.case_sensitive ? new RegExp(testIssn) : new RegExp(testIssn, 'i');\n  if (!testIssn.test(str)) {\n    return false;\n  }\n  var issnDigits = str.replace('-', '');\n  var position = 8;\n  var checksum = 0;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = issnDigits[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var digit = _step.value;\n\n      var digitValue = digit.toUpperCase() === 'X' ? 10 : +digit;\n      checksum += digitValue * position;\n      --position;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return checksum % 11 === 0;\n}\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}