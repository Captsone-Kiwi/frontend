{"ast":null,"code":"const validator = require(\"validator\");\n\nconst validateSignUpForm = payload => {\n  const errors = {};\n  let message = \"\";\n  let isFormValid = true;\n\n  if (!payload || typeof payload.username !== \"string\" || payload.username.trim().length === 0) {\n    isFormValid = false;\n    errors.username = \"Please provide a user name.\";\n  }\n\n  if (!payload || typeof payload.email !== \"string\" || !validator.isEmail(payload.email)) {\n    isFormValid = false;\n    errors.email = \"Please provide a correct email address.\";\n  }\n\n  if (!payload || typeof payload.password !== \"string\" || payload.password.trim().length < 8) {\n    isFormValid = false;\n    errors.password = \"Password must have at least 8 characters.\";\n  }\n\n  if (!payload || payload.pwconfirm !== payload.password) {\n    isFormValid = false;\n    errors.pwconfirm = \"Password confirmation doesn't match.\";\n  }\n\n  if (!isFormValid) {\n    message = \"Check the form for errors.\";\n  }\n\n  return {\n    success: isFormValid,\n    message,\n    errors\n  };\n};\n\nconst validateLoginForm = payload => {\n  const errors = {};\n  let message = \"\";\n  let isFormValid = true;\n\n  if (!payload || typeof payload.username !== \"string\" || payload.username.trim().length === 0) {\n    isFormValid = false;\n    errors.username = \"Please provide your user name.\";\n  }\n\n  if (!payload || typeof payload.password !== \"string\" || payload.password.trim().length === 0) {\n    isFormValid = false;\n    errors.password = \"Please provide your password.\";\n  }\n\n  if (!isFormValid) {\n    message = \"Check the form for errors.\";\n  }\n\n  return {\n    success: isFormValid,\n    message,\n    errors\n  };\n};\n\nmodule.exports = {\n  validateLoginForm: validateLoginForm,\n  validateSignUpForm: validateSignUpForm\n};","map":{"version":3,"sources":["/Users/100s/Documents/GitHub/frontend/src/pages/SignUp/validate.js"],"names":["validator","require","validateSignUpForm","payload","errors","message","isFormValid","username","trim","length","email","isEmail","password","pwconfirm","success","validateLoginForm","module","exports"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AAEA,MAAMC,kBAAkB,GAAGC,OAAO,IAAI;AACpC,QAAMC,MAAM,GAAG,EAAf;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,WAAW,GAAG,IAAlB;;AAEA,MACE,CAACH,OAAD,IACA,OAAOA,OAAO,CAACI,QAAf,KAA4B,QAD5B,IAEAJ,OAAO,CAACI,QAAR,CAAiBC,IAAjB,GAAwBC,MAAxB,KAAmC,CAHrC,EAIE;AACAH,IAAAA,WAAW,GAAG,KAAd;AACAF,IAAAA,MAAM,CAACG,QAAP,GAAkB,6BAAlB;AACD;;AAED,MACE,CAACJ,OAAD,IACA,OAAOA,OAAO,CAACO,KAAf,KAAyB,QADzB,IAEA,CAACV,SAAS,CAACW,OAAV,CAAkBR,OAAO,CAACO,KAA1B,CAHH,EAIE;AACAJ,IAAAA,WAAW,GAAG,KAAd;AACAF,IAAAA,MAAM,CAACM,KAAP,GAAe,yCAAf;AACD;;AAED,MACE,CAACP,OAAD,IACA,OAAOA,OAAO,CAACS,QAAf,KAA4B,QAD5B,IAEAT,OAAO,CAACS,QAAR,CAAiBJ,IAAjB,GAAwBC,MAAxB,GAAiC,CAHnC,EAIE;AACAH,IAAAA,WAAW,GAAG,KAAd;AACAF,IAAAA,MAAM,CAACQ,QAAP,GAAkB,2CAAlB;AACD;;AAED,MAAI,CAACT,OAAD,IAAYA,OAAO,CAACU,SAAR,KAAsBV,OAAO,CAACS,QAA9C,EAAwD;AACtDN,IAAAA,WAAW,GAAG,KAAd;AACAF,IAAAA,MAAM,CAACS,SAAP,GAAmB,sCAAnB;AACD;;AAED,MAAI,CAACP,WAAL,EAAkB;AAChBD,IAAAA,OAAO,GAAG,4BAAV;AACD;;AAED,SAAO;AACLS,IAAAA,OAAO,EAAER,WADJ;AAELD,IAAAA,OAFK;AAGLD,IAAAA;AAHK,GAAP;AAKD,CA9CD;;AAgDA,MAAMW,iBAAiB,GAAGZ,OAAO,IAAI;AACnC,QAAMC,MAAM,GAAG,EAAf;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,WAAW,GAAG,IAAlB;;AAEA,MACE,CAACH,OAAD,IACA,OAAOA,OAAO,CAACI,QAAf,KAA4B,QAD5B,IAEAJ,OAAO,CAACI,QAAR,CAAiBC,IAAjB,GAAwBC,MAAxB,KAAmC,CAHrC,EAIE;AACAH,IAAAA,WAAW,GAAG,KAAd;AACAF,IAAAA,MAAM,CAACG,QAAP,GAAkB,gCAAlB;AACD;;AAED,MACE,CAACJ,OAAD,IACA,OAAOA,OAAO,CAACS,QAAf,KAA4B,QAD5B,IAEAT,OAAO,CAACS,QAAR,CAAiBJ,IAAjB,GAAwBC,MAAxB,KAAmC,CAHrC,EAIE;AACAH,IAAAA,WAAW,GAAG,KAAd;AACAF,IAAAA,MAAM,CAACQ,QAAP,GAAkB,+BAAlB;AACD;;AAED,MAAI,CAACN,WAAL,EAAkB;AAChBD,IAAAA,OAAO,GAAG,4BAAV;AACD;;AAED,SAAO;AACLS,IAAAA,OAAO,EAAER,WADJ;AAELD,IAAAA,OAFK;AAGLD,IAAAA;AAHK,GAAP;AAKD,CAhCD;;AAkCAY,MAAM,CAACC,OAAP,GAAiB;AACfF,EAAAA,iBAAiB,EAAEA,iBADJ;AAEfb,EAAAA,kBAAkB,EAAEA;AAFL,CAAjB","sourcesContent":["const validator = require(\"validator\");\n\nconst validateSignUpForm = payload => {\n  const errors = {};\n  let message = \"\";\n  let isFormValid = true;\n\n  if (\n    !payload ||\n    typeof payload.username !== \"string\" ||\n    payload.username.trim().length === 0\n  ) {\n    isFormValid = false;\n    errors.username = \"Please provide a user name.\";\n  }\n\n  if (\n    !payload ||\n    typeof payload.email !== \"string\" ||\n    !validator.isEmail(payload.email)\n  ) {\n    isFormValid = false;\n    errors.email = \"Please provide a correct email address.\";\n  }\n\n  if (\n    !payload ||\n    typeof payload.password !== \"string\" ||\n    payload.password.trim().length < 8\n  ) {\n    isFormValid = false;\n    errors.password = \"Password must have at least 8 characters.\";\n  }\n\n  if (!payload || payload.pwconfirm !== payload.password) {\n    isFormValid = false;\n    errors.pwconfirm = \"Password confirmation doesn't match.\";\n  }\n\n  if (!isFormValid) {\n    message = \"Check the form for errors.\";\n  }\n\n  return {\n    success: isFormValid,\n    message,\n    errors\n  };\n};\n\nconst validateLoginForm = payload => {\n  const errors = {};\n  let message = \"\";\n  let isFormValid = true;\n\n  if (\n    !payload ||\n    typeof payload.username !== \"string\" ||\n    payload.username.trim().length === 0\n  ) {\n    isFormValid = false;\n    errors.username = \"Please provide your user name.\";\n  }\n\n  if (\n    !payload ||\n    typeof payload.password !== \"string\" ||\n    payload.password.trim().length === 0\n  ) {\n    isFormValid = false;\n    errors.password = \"Please provide your password.\";\n  }\n\n  if (!isFormValid) {\n    message = \"Check the form for errors.\";\n  }\n\n  return {\n    success: isFormValid,\n    message,\n    errors\n  };\n};\n\nmodule.exports = {\n  validateLoginForm: validateLoginForm,\n  validateSignUpForm: validateSignUpForm\n};\n"]},"metadata":{},"sourceType":"module"}