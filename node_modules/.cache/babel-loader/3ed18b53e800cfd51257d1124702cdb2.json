{"ast":null,"code":"var _jsxFileName = \"/Users/100s/Documents/GitHub/frontend/src/pages/Room.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport styled from \"styled-components\";\nimport { useLocation } from \"react-router-dom\";\nimport queryString from 'query-string';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n    padding: 20px;\n    display: flex;\n    height: 100vh;\n    width: 90%;\n    margin: auto;\n    flex-wrap: wrap;\n`;\n_c = Container;\nconst StyledVideo = styled.video`\n    height: 40%;\n    width: 50%;\n`;\n_c2 = StyledVideo;\n\nconst Video = props => {\n  _s();\n\n  const ref = useRef();\n  useEffect(() => {\n    props.peer.on(\"stream\", stream => {\n      ref.current.srcObject = stream;\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(StyledVideo, {\n    playsInline: true,\n    autoPlay: true,\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Video, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\n_c3 = Video;\nconst videoConstraints = {\n  height: window.innerHeight / 2,\n  width: window.innerWidth / 2\n};\n\nconst Room = props => {\n  _s2();\n\n  const [peers, setPeers] = useState([]);\n  const [id, setID] = useState('');\n  const [roomID, setRoomID] = useState('');\n  const socketRef = useRef();\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n  const location = useLocation().search; // const roomID = queryString.parse(location);\n  // const roomID = 1234;\n\n  useEffect(() => {\n    const {\n      id,\n      roomID\n    } = queryString.parse(location); //     socketRef.current = io.connect(\"/\");\n\n    navigator.mediaDevices.getUserMedia({\n      video: videoConstraints,\n      audio: true\n    }).then(stream => {\n      userVideo.current.srcObject = stream; //         socketRef.current.emit(\"join room\", {id, roomID});\n      //         socketRef.current.on(\"all users\", users => {\n      //             const peers = [];\n      //             users.forEach(userID => {\n      //                 const peer = createPeer(userID, socketRef.current.id, stream);\n      //                 peersRef.current.push({\n      //                     peerID: userID,\n      //                     peer,\n      //                 })\n      //                 peers.push(peer);\n      //             })\n      //             setPeers(peers);\n    }); //         socketRef.current.on(\"user joined\", payload => {\n    //             const peer = addPeer(payload.signal, payload.callerID, stream);\n    //             peersRef.current.push({\n    //                 peerID: payload.callerID,\n    //                 peer,\n    //             })\n    //             setPeers(users => [...users, peer]);\n    //         });\n    //         socketRef.current.on(\"receiving returned signal\", payload => {\n    //             const item = peersRef.current.find(p => p.peerID === payload.id);\n    //             item.peer.signal(payload.signal);\n    //         });\n    //     })\n  }, []); // function createPeer(userToSignal, callerID, stream) {\n  //     const peer = new Peer({\n  //         initiator: true,\n  //         trickle: false,\n  //         stream,\n  //     });\n  //     peer.on(\"signal\", signal => {\n  //         socketRef.current.emit(\"sending signal\", { userToSignal, callerID, signal })\n  //     })\n  //     return peer;\n  // }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(StyledVideo, {\n      muted: true,\n      ref: userVideo,\n      autoPlay: true,\n      playsInline: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Video, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(Room, \"HoN4ZuaACaMtxmwAtFRdXOs0NZk=\", false, function () {\n  return [useLocation];\n});\n\n_c4 = Room;\nexport default Room;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"StyledVideo\");\n$RefreshReg$(_c3, \"Video\");\n$RefreshReg$(_c4, \"Room\");","map":{"version":3,"sources":["/Users/100s/Documents/GitHub/frontend/src/pages/Room.js"],"names":["React","useEffect","useRef","useState","io","Peer","styled","useLocation","queryString","Container","div","StyledVideo","video","Video","props","ref","peer","on","stream","current","srcObject","videoConstraints","height","window","innerHeight","width","innerWidth","Room","peers","setPeers","id","setID","roomID","setRoomID","socketRef","userVideo","peersRef","location","search","parse","navigator","mediaDevices","getUserMedia","audio","then"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport styled from \"styled-components\";\nimport { useLocation } from \"react-router-dom\";\nimport queryString from 'query-string';\n\n\nconst Container = styled.div`\n    padding: 20px;\n    display: flex;\n    height: 100vh;\n    width: 90%;\n    margin: auto;\n    flex-wrap: wrap;\n`;\n\nconst StyledVideo = styled.video`\n    height: 40%;\n    width: 50%;\n`;\n\nconst Video = (props) => {\n    const ref = useRef();\n\n    useEffect(() => {\n        props.peer.on(\"stream\", stream => {\n            ref.current.srcObject = stream;\n        })\n    }, []);\n\n    return (\n        <StyledVideo playsInline autoPlay ref={ref} />\n    );\n}\n\n\nconst videoConstraints = {\n    height: window.innerHeight / 2,\n    width: window.innerWidth / 2\n};\n\nconst Room = (props) => {\n    const [peers, setPeers] = useState([]);\n    const [id, setID] = useState('');\n    const [roomID, setRoomID] = useState('');\n    const socketRef = useRef();\n    const userVideo = useRef();\n    const peersRef = useRef([]);\n    const location = useLocation().search;\n    // const roomID = queryString.parse(location);\n\n    // const roomID = 1234;\n\n    useEffect(() => {\n        const {id, roomID} = queryString.parse(location);\n\n    //     socketRef.current = io.connect(\"/\");\n\n        navigator.mediaDevices.getUserMedia({ video: videoConstraints, audio: true }).then(stream => {\n            userVideo.current.srcObject = stream;\n    //         socketRef.current.emit(\"join room\", {id, roomID});\n    //         socketRef.current.on(\"all users\", users => {\n    //             const peers = [];\n    //             users.forEach(userID => {\n    //                 const peer = createPeer(userID, socketRef.current.id, stream);\n    //                 peersRef.current.push({\n    //                     peerID: userID,\n    //                     peer,\n    //                 })\n    //                 peers.push(peer);\n    //             })\n    //             setPeers(peers);\n            })\n\n    //         socketRef.current.on(\"user joined\", payload => {\n    //             const peer = addPeer(payload.signal, payload.callerID, stream);\n    //             peersRef.current.push({\n    //                 peerID: payload.callerID,\n    //                 peer,\n    //             })\n\n    //             setPeers(users => [...users, peer]);\n    //         });\n\n    //         socketRef.current.on(\"receiving returned signal\", payload => {\n    //             const item = peersRef.current.find(p => p.peerID === payload.id);\n    //             item.peer.signal(payload.signal);\n    //         });\n    //     })\n    }, []);\n\n    // function createPeer(userToSignal, callerID, stream) {\n    //     const peer = new Peer({\n    //         initiator: true,\n    //         trickle: false,\n    //         stream,\n    //     });\n\n    //     peer.on(\"signal\", signal => {\n    //         socketRef.current.emit(\"sending signal\", { userToSignal, callerID, signal })\n    //     })\n\n    //     return peer;\n    // }\n\n\n\n    return (\n        <Container>\n            <StyledVideo muted ref={userVideo} autoPlay playsInline />\n                <Video/>\n            {/* {peers.map((peer, index) => {\n                return (\n                    <Video key={index} peer={peer} />\n                );\n            })} */}\n        </Container>\n    );\n};\n\nexport default Room;"]},"metadata":{},"sourceType":"module"}