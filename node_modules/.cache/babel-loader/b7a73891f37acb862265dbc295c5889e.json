{"ast":null,"code":"// Generated by CoffeeScript 1.10.0\nvar BRUTEFORCE_CARDINALITY, MIN_GUESSES_BEFORE_GROWING_SEQUENCE, MIN_SUBMATCH_GUESSES_MULTI_CHAR, MIN_SUBMATCH_GUESSES_SINGLE_CHAR, adjacency_graphs, calc_average_degree, k, scoring, v;\nadjacency_graphs = require('./adjacency_graphs');\n\ncalc_average_degree = function (graph) {\n  var average, k, key, n, neighbors, v;\n  average = 0;\n\n  for (key in graph) {\n    neighbors = graph[key];\n\n    average += function () {\n      var len, o, results;\n      results = [];\n\n      for (o = 0, len = neighbors.length; o < len; o++) {\n        n = neighbors[o];\n\n        if (n) {\n          results.push(n);\n        }\n      }\n\n      return results;\n    }().length;\n  }\n\n  average /= function () {\n    var results;\n    results = [];\n\n    for (k in graph) {\n      v = graph[k];\n      results.push(k);\n    }\n\n    return results;\n  }().length;\n\n  return average;\n};\n\nBRUTEFORCE_CARDINALITY = 10;\nMIN_GUESSES_BEFORE_GROWING_SEQUENCE = 10000;\nMIN_SUBMATCH_GUESSES_SINGLE_CHAR = 10;\nMIN_SUBMATCH_GUESSES_MULTI_CHAR = 50;\nscoring = {\n  nCk: function (n, k) {\n    var d, o, r, ref;\n\n    if (k > n) {\n      return 0;\n    }\n\n    if (k === 0) {\n      return 1;\n    }\n\n    r = 1;\n\n    for (d = o = 1, ref = k; 1 <= ref ? o <= ref : o >= ref; d = 1 <= ref ? ++o : --o) {\n      r *= n;\n      r /= d;\n      n -= 1;\n    }\n\n    return r;\n  },\n  log10: function (n) {\n    return Math.log(n) / Math.log(10);\n  },\n  log2: function (n) {\n    return Math.log(n) / Math.log(2);\n  },\n  factorial: function (n) {\n    var f, i, o, ref;\n\n    if (n < 2) {\n      return 1;\n    }\n\n    f = 1;\n\n    for (i = o = 2, ref = n; 2 <= ref ? o <= ref : o >= ref; i = 2 <= ref ? ++o : --o) {\n      f *= i;\n    }\n\n    return f;\n  },\n  most_guessable_match_sequence: function (password, matches, _exclude_additive) {\n    var _, bruteforce_update, guesses, k, l, len, len1, len2, lst, m, make_bruteforce_match, matches_by_j, n, o, optimal, optimal_l, optimal_match_sequence, q, ref, ref1, u, unwind, update, w;\n\n    if (_exclude_additive == null) {\n      _exclude_additive = false;\n    }\n\n    n = password.length;\n\n    matches_by_j = function () {\n      var o, ref, results;\n      results = [];\n\n      for (_ = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; _ = 0 <= ref ? ++o : --o) {\n        results.push([]);\n      }\n\n      return results;\n    }();\n\n    for (o = 0, len = matches.length; o < len; o++) {\n      m = matches[o];\n      matches_by_j[m.j].push(m);\n    }\n\n    for (q = 0, len1 = matches_by_j.length; q < len1; q++) {\n      lst = matches_by_j[q];\n      lst.sort(function (m1, m2) {\n        return m1.i - m2.i;\n      });\n    }\n\n    optimal = {\n      m: function () {\n        var ref, results, u;\n        results = [];\n\n        for (_ = u = 0, ref = n; 0 <= ref ? u < ref : u > ref; _ = 0 <= ref ? ++u : --u) {\n          results.push({});\n        }\n\n        return results;\n      }(),\n      pi: function () {\n        var ref, results, u;\n        results = [];\n\n        for (_ = u = 0, ref = n; 0 <= ref ? u < ref : u > ref; _ = 0 <= ref ? ++u : --u) {\n          results.push({});\n        }\n\n        return results;\n      }(),\n      g: function () {\n        var ref, results, u;\n        results = [];\n\n        for (_ = u = 0, ref = n; 0 <= ref ? u < ref : u > ref; _ = 0 <= ref ? ++u : --u) {\n          results.push({});\n        }\n\n        return results;\n      }()\n    };\n\n    update = function (_this) {\n      return function (m, l) {\n        var competing_g, competing_l, g, k, pi, ref;\n        k = m.j;\n        pi = _this.estimate_guesses(m, password);\n\n        if (l > 1) {\n          pi *= optimal.pi[m.i - 1][l - 1];\n        }\n\n        g = _this.factorial(l) * pi;\n\n        if (!_exclude_additive) {\n          g += Math.pow(MIN_GUESSES_BEFORE_GROWING_SEQUENCE, l - 1);\n        }\n\n        ref = optimal.g[k];\n\n        for (competing_l in ref) {\n          competing_g = ref[competing_l];\n\n          if (competing_l > l) {\n            continue;\n          }\n\n          if (competing_g <= g) {\n            return;\n          }\n        }\n\n        optimal.g[k][l] = g;\n        optimal.m[k][l] = m;\n        return optimal.pi[k][l] = pi;\n      };\n    }(this);\n\n    bruteforce_update = function (_this) {\n      return function (k) {\n        var i, l, last_m, ref, results, u;\n        m = make_bruteforce_match(0, k);\n        update(m, 1);\n        results = [];\n\n        for (i = u = 1, ref = k; 1 <= ref ? u <= ref : u >= ref; i = 1 <= ref ? ++u : --u) {\n          m = make_bruteforce_match(i, k);\n          results.push(function () {\n            var ref1, results1;\n            ref1 = optimal.m[i - 1];\n            results1 = [];\n\n            for (l in ref1) {\n              last_m = ref1[l];\n              l = parseInt(l);\n\n              if (last_m.pattern === 'bruteforce') {\n                continue;\n              }\n\n              results1.push(update(m, l + 1));\n            }\n\n            return results1;\n          }());\n        }\n\n        return results;\n      };\n    }(this);\n\n    make_bruteforce_match = function (_this) {\n      return function (i, j) {\n        return {\n          pattern: 'bruteforce',\n          token: password.slice(i, +j + 1 || 9e9),\n          i: i,\n          j: j\n        };\n      };\n    }(this);\n\n    unwind = function (_this) {\n      return function (n) {\n        var candidate_g, candidate_l, g, k, l, optimal_match_sequence, ref;\n        optimal_match_sequence = [];\n        k = n - 1;\n        l = void 0;\n        g = Infinity;\n        ref = optimal.g[k];\n\n        for (candidate_l in ref) {\n          candidate_g = ref[candidate_l];\n\n          if (candidate_g < g) {\n            l = candidate_l;\n            g = candidate_g;\n          }\n        }\n\n        while (k >= 0) {\n          m = optimal.m[k][l];\n          optimal_match_sequence.unshift(m);\n          k = m.i - 1;\n          l--;\n        }\n\n        return optimal_match_sequence;\n      };\n    }(this);\n\n    for (k = u = 0, ref = n; 0 <= ref ? u < ref : u > ref; k = 0 <= ref ? ++u : --u) {\n      ref1 = matches_by_j[k];\n\n      for (w = 0, len2 = ref1.length; w < len2; w++) {\n        m = ref1[w];\n\n        if (m.i > 0) {\n          for (l in optimal.m[m.i - 1]) {\n            l = parseInt(l);\n            update(m, l + 1);\n          }\n        } else {\n          update(m, 1);\n        }\n      }\n\n      bruteforce_update(k);\n    }\n\n    optimal_match_sequence = unwind(n);\n    optimal_l = optimal_match_sequence.length;\n\n    if (password.length === 0) {\n      guesses = 1;\n    } else {\n      guesses = optimal.g[n - 1][optimal_l];\n    }\n\n    return {\n      password: password,\n      guesses: guesses,\n      guesses_log10: this.log10(guesses),\n      sequence: optimal_match_sequence\n    };\n  },\n  estimate_guesses: function (match, password) {\n    var estimation_functions, guesses, min_guesses;\n\n    if (match.guesses != null) {\n      return match.guesses;\n    }\n\n    min_guesses = 1;\n\n    if (match.token.length < password.length) {\n      min_guesses = match.token.length === 1 ? MIN_SUBMATCH_GUESSES_SINGLE_CHAR : MIN_SUBMATCH_GUESSES_MULTI_CHAR;\n    }\n\n    estimation_functions = {\n      bruteforce: this.bruteforce_guesses,\n      dictionary: this.dictionary_guesses,\n      spatial: this.spatial_guesses,\n      repeat: this.repeat_guesses,\n      sequence: this.sequence_guesses,\n      regex: this.regex_guesses,\n      date: this.date_guesses\n    };\n    guesses = estimation_functions[match.pattern].call(this, match);\n    match.guesses = Math.max(guesses, min_guesses);\n    match.guesses_log10 = this.log10(match.guesses);\n    return match.guesses;\n  },\n  bruteforce_guesses: function (match) {\n    var guesses, min_guesses;\n    guesses = Math.pow(BRUTEFORCE_CARDINALITY, match.token.length);\n\n    if (guesses === Number.POSITIVE_INFINITY) {\n      guesses = Number.MAX_VALUE;\n    }\n\n    min_guesses = match.token.length === 1 ? MIN_SUBMATCH_GUESSES_SINGLE_CHAR + 1 : MIN_SUBMATCH_GUESSES_MULTI_CHAR + 1;\n    return Math.max(guesses, min_guesses);\n  },\n  repeat_guesses: function (match) {\n    return match.base_guesses * match.repeat_count;\n  },\n  sequence_guesses: function (match) {\n    var base_guesses, first_chr;\n    first_chr = match.token.charAt(0);\n\n    if (first_chr === 'a' || first_chr === 'A' || first_chr === 'z' || first_chr === 'Z' || first_chr === '0' || first_chr === '1' || first_chr === '9') {\n      base_guesses = 4;\n    } else {\n      if (first_chr.match(/\\d/)) {\n        base_guesses = 10;\n      } else {\n        base_guesses = 26;\n      }\n    }\n\n    if (!match.ascending) {\n      base_guesses *= 2;\n    }\n\n    return base_guesses * match.token.length;\n  },\n  MIN_YEAR_SPACE: 20,\n  REFERENCE_YEAR: new Date().getFullYear(),\n  regex_guesses: function (match) {\n    var char_class_bases, year_space;\n    char_class_bases = {\n      alpha_lower: 26,\n      alpha_upper: 26,\n      alpha: 52,\n      alphanumeric: 62,\n      digits: 10,\n      symbols: 33\n    };\n\n    if (match.regex_name in char_class_bases) {\n      return Math.pow(char_class_bases[match.regex_name], match.token.length);\n    } else {\n      switch (match.regex_name) {\n        case 'recent_year':\n          year_space = Math.abs(parseInt(match.regex_match[0]) - this.REFERENCE_YEAR);\n          year_space = Math.max(year_space, this.MIN_YEAR_SPACE);\n          return year_space;\n      }\n    }\n  },\n  date_guesses: function (match) {\n    var guesses, year_space;\n    year_space = Math.max(Math.abs(match.year - this.REFERENCE_YEAR), this.MIN_YEAR_SPACE);\n    guesses = year_space * 365;\n\n    if (match.separator) {\n      guesses *= 4;\n    }\n\n    return guesses;\n  },\n  KEYBOARD_AVERAGE_DEGREE: calc_average_degree(adjacency_graphs.qwerty),\n  KEYPAD_AVERAGE_DEGREE: calc_average_degree(adjacency_graphs.keypad),\n  KEYBOARD_STARTING_POSITIONS: function () {\n    var ref, results;\n    ref = adjacency_graphs.qwerty;\n    results = [];\n\n    for (k in ref) {\n      v = ref[k];\n      results.push(k);\n    }\n\n    return results;\n  }().length,\n  KEYPAD_STARTING_POSITIONS: function () {\n    var ref, results;\n    ref = adjacency_graphs.keypad;\n    results = [];\n\n    for (k in ref) {\n      v = ref[k];\n      results.push(k);\n    }\n\n    return results;\n  }().length,\n  spatial_guesses: function (match) {\n    var L, S, U, d, guesses, i, j, o, possible_turns, q, ref, ref1, ref2, ref3, s, shifted_variations, t, u;\n\n    if ((ref = match.graph) === 'qwerty' || ref === 'dvorak') {\n      s = this.KEYBOARD_STARTING_POSITIONS;\n      d = this.KEYBOARD_AVERAGE_DEGREE;\n    } else {\n      s = this.KEYPAD_STARTING_POSITIONS;\n      d = this.KEYPAD_AVERAGE_DEGREE;\n    }\n\n    guesses = 0;\n    L = match.token.length;\n    t = match.turns;\n\n    for (i = o = 2, ref1 = L; 2 <= ref1 ? o <= ref1 : o >= ref1; i = 2 <= ref1 ? ++o : --o) {\n      possible_turns = Math.min(t, i - 1);\n\n      for (j = q = 1, ref2 = possible_turns; 1 <= ref2 ? q <= ref2 : q >= ref2; j = 1 <= ref2 ? ++q : --q) {\n        guesses += this.nCk(i - 1, j - 1) * s * Math.pow(d, j);\n      }\n    }\n\n    if (match.shifted_count) {\n      S = match.shifted_count;\n      U = match.token.length - match.shifted_count;\n\n      if (S === 0 || U === 0) {\n        guesses *= 2;\n      } else {\n        shifted_variations = 0;\n\n        for (i = u = 1, ref3 = Math.min(S, U); 1 <= ref3 ? u <= ref3 : u >= ref3; i = 1 <= ref3 ? ++u : --u) {\n          shifted_variations += this.nCk(S + U, i);\n        }\n\n        guesses *= shifted_variations;\n      }\n    }\n\n    return guesses;\n  },\n  dictionary_guesses: function (match) {\n    var reversed_variations;\n    match.base_guesses = match.rank;\n    match.uppercase_variations = this.uppercase_variations(match);\n    match.l33t_variations = this.l33t_variations(match);\n    reversed_variations = match.reversed && 2 || 1;\n    return match.base_guesses * match.uppercase_variations * match.l33t_variations * reversed_variations;\n  },\n  START_UPPER: /^[A-Z][^A-Z]+$/,\n  END_UPPER: /^[^A-Z]+[A-Z]$/,\n  ALL_UPPER: /^[^a-z]+$/,\n  ALL_LOWER: /^[^A-Z]+$/,\n  uppercase_variations: function (match) {\n    var L, U, chr, i, len, o, q, ref, ref1, regex, variations, word;\n    word = match.token;\n\n    if (word.match(this.ALL_LOWER) || word.toLowerCase() === word) {\n      return 1;\n    }\n\n    ref = [this.START_UPPER, this.END_UPPER, this.ALL_UPPER];\n\n    for (o = 0, len = ref.length; o < len; o++) {\n      regex = ref[o];\n\n      if (word.match(regex)) {\n        return 2;\n      }\n    }\n\n    U = function () {\n      var len1, q, ref1, results;\n      ref1 = word.split('');\n      results = [];\n\n      for (q = 0, len1 = ref1.length; q < len1; q++) {\n        chr = ref1[q];\n\n        if (chr.match(/[A-Z]/)) {\n          results.push(chr);\n        }\n      }\n\n      return results;\n    }().length;\n\n    L = function () {\n      var len1, q, ref1, results;\n      ref1 = word.split('');\n      results = [];\n\n      for (q = 0, len1 = ref1.length; q < len1; q++) {\n        chr = ref1[q];\n\n        if (chr.match(/[a-z]/)) {\n          results.push(chr);\n        }\n      }\n\n      return results;\n    }().length;\n\n    variations = 0;\n\n    for (i = q = 1, ref1 = Math.min(U, L); 1 <= ref1 ? q <= ref1 : q >= ref1; i = 1 <= ref1 ? ++q : --q) {\n      variations += this.nCk(U + L, i);\n    }\n\n    return variations;\n  },\n  l33t_variations: function (match) {\n    var S, U, chr, chrs, i, o, p, possibilities, ref, ref1, subbed, unsubbed, variations;\n\n    if (!match.l33t) {\n      return 1;\n    }\n\n    variations = 1;\n    ref = match.sub;\n\n    for (subbed in ref) {\n      unsubbed = ref[subbed];\n      chrs = match.token.toLowerCase().split('');\n\n      S = function () {\n        var len, o, results;\n        results = [];\n\n        for (o = 0, len = chrs.length; o < len; o++) {\n          chr = chrs[o];\n\n          if (chr === subbed) {\n            results.push(chr);\n          }\n        }\n\n        return results;\n      }().length;\n\n      U = function () {\n        var len, o, results;\n        results = [];\n\n        for (o = 0, len = chrs.length; o < len; o++) {\n          chr = chrs[o];\n\n          if (chr === unsubbed) {\n            results.push(chr);\n          }\n        }\n\n        return results;\n      }().length;\n\n      if (S === 0 || U === 0) {\n        variations *= 2;\n      } else {\n        p = Math.min(U, S);\n        possibilities = 0;\n\n        for (i = o = 1, ref1 = p; 1 <= ref1 ? o <= ref1 : o >= ref1; i = 1 <= ref1 ? ++o : --o) {\n          possibilities += this.nCk(U + S, i);\n        }\n\n        variations *= possibilities;\n      }\n    }\n\n    return variations;\n  }\n};\nmodule.exports = scoring;","map":{"version":3,"mappings":"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","names":["adjacency_graphs","require","calc_average_degree","graph","average","results","o","n","length","k","BRUTEFORCE_CARDINALITY","MIN_GUESSES_BEFORE_GROWING_SEQUENCE","MIN_SUBMATCH_GUESSES_SINGLE_CHAR","MIN_SUBMATCH_GUESSES_MULTI_CHAR","scoring","nCk","r","d","log10","Math","log","log2","factorial","f","i","most_guessable_match_sequence","password","matches","_exclude_additive","matches_by_j","_","j","push","m","lst","sort","m1","m2","optimal","pi","g","update","l","_this","pow","ref","competing_l","competing_g","bruteforce_update","make_bruteforce_match","ref1","results1","parseInt","last_m","pattern","token","unwind","optimal_match_sequence","Infinity","candidate_g","candidate_l","unshift","optimal_l","guesses","guesses_log10","sequence","estimate_guesses","match","min_guesses","estimation_functions","bruteforce","bruteforce_guesses","dictionary","dictionary_guesses","spatial","spatial_guesses","repeat","repeat_guesses","sequence_guesses","regex","regex_guesses","date","date_guesses","call","max","Number","POSITIVE_INFINITY","MAX_VALUE","base_guesses","repeat_count","first_chr","charAt","ascending","MIN_YEAR_SPACE","REFERENCE_YEAR","getFullYear","char_class_bases","alpha_lower","alpha_upper","alpha","alphanumeric","digits","symbols","regex_name","year_space","abs","regex_match","year","separator","KEYBOARD_AVERAGE_DEGREE","qwerty","KEYPAD_AVERAGE_DEGREE","keypad","KEYBOARD_STARTING_POSITIONS","KEYPAD_STARTING_POSITIONS","s","L","t","turns","possible_turns","min","shifted_count","S","U","shifted_variations","rank","uppercase_variations","l33t_variations","reversed_variations","reversed","START_UPPER","END_UPPER","ALL_UPPER","ALL_LOWER","word","toLowerCase","q","chr","variations","l33t","chrs","split","subbed","unsubbed","p","possibilities","module","exports"],"sources":["/Users/100s/Documents/GitHub/frontend/node_modules/zxcvbn/src/scoring.coffee"],"sourcesContent":["adjacency_graphs = require('./adjacency_graphs')\n\n# on qwerty, 'g' has degree 6, being adjacent to 'ftyhbv'. '\\' has degree 1.\n# this calculates the average over all keys.\ncalc_average_degree = (graph) ->\n  average = 0\n  for key, neighbors of graph\n    average += (n for n in neighbors when n).length\n  average /= (k for k,v of graph).length\n  average\n\nBRUTEFORCE_CARDINALITY = 10\nMIN_GUESSES_BEFORE_GROWING_SEQUENCE = 10000\nMIN_SUBMATCH_GUESSES_SINGLE_CHAR = 10\nMIN_SUBMATCH_GUESSES_MULTI_CHAR = 50\n\nscoring =\n  nCk: (n, k) ->\n    # http://blog.plover.com/math/choose.html\n    return 0 if k > n\n    return 1 if k == 0\n    r = 1\n    for d in [1..k]\n      r *= n\n      r /= d\n      n -= 1\n    r\n\n  log10: (n) -> Math.log(n) / Math.log(10) # IE doesn't support Math.log10 :(\n  log2:  (n) -> Math.log(n) / Math.log(2)\n\n  factorial: (n) ->\n    # unoptimized, called only on small n\n    return 1 if n < 2\n    f = 1\n    f *= i for i in [2..n]\n    f\n\n  # ------------------------------------------------------------------------------\n  # search --- most guessable match sequence -------------------------------------\n  # ------------------------------------------------------------------------------\n  #\n  # takes a sequence of overlapping matches, returns the non-overlapping sequence with\n  # minimum guesses. the following is a O(l_max * (n + m)) dynamic programming algorithm\n  # for a length-n password with m candidate matches. l_max is the maximum optimal\n  # sequence length spanning each prefix of the password. In practice it rarely exceeds 5 and the\n  # search terminates rapidly.\n  #\n  # the optimal \"minimum guesses\" sequence is here defined to be the sequence that\n  # minimizes the following function:\n  #\n  #    g = l! * Product(m.guesses for m in sequence) + D^(l - 1)\n  #\n  # where l is the length of the sequence.\n  #\n  # the factorial term is the number of ways to order l patterns.\n  #\n  # the D^(l-1) term is another length penalty, roughly capturing the idea that an\n  # attacker will try lower-length sequences first before trying length-l sequences.\n  #\n  # for example, consider a sequence that is date-repeat-dictionary.\n  #  - an attacker would need to try other date-repeat-dictionary combinations,\n  #    hence the product term.\n  #  - an attacker would need to try repeat-date-dictionary, dictionary-repeat-date,\n  #    ..., hence the factorial term.\n  #  - an attacker would also likely try length-1 (dictionary) and length-2 (dictionary-date)\n  #    sequences before length-3. assuming at minimum D guesses per pattern type,\n  #    D^(l-1) approximates Sum(D^i for i in [1..l-1]\n  #\n  # ------------------------------------------------------------------------------\n\n  most_guessable_match_sequence: (password, matches, _exclude_additive=false) ->\n\n    n = password.length\n\n    # partition matches into sublists according to ending index j\n    matches_by_j = ([] for _ in [0...n])\n    for m in matches\n      matches_by_j[m.j].push m\n    # small detail: for deterministic output, sort each sublist by i.\n    for lst in matches_by_j\n      lst.sort (m1, m2) -> m1.i - m2.i\n\n    optimal =\n      # optimal.m[k][l] holds final match in the best length-l match sequence covering the\n      # password prefix up to k, inclusive.\n      # if there is no length-l sequence that scores better (fewer guesses) than\n      # a shorter match sequence spanning the same prefix, optimal.m[k][l] is undefined.\n      m:  ({} for _ in [0...n])\n\n      # same structure as optimal.m -- holds the product term Prod(m.guesses for m in sequence).\n      # optimal.pi allows for fast (non-looping) updates to the minimization function.\n      pi: ({} for _ in [0...n])\n\n      # same structure as optimal.m -- holds the overall metric.\n      g:  ({} for _ in [0...n])\n\n    # helper: considers whether a length-l sequence ending at match m is better (fewer guesses)\n    # than previously encountered sequences, updating state if so.\n    update = (m, l) =>\n      k = m.j\n      pi = @estimate_guesses m, password\n      if l > 1\n        # we're considering a length-l sequence ending with match m:\n        # obtain the product term in the minimization function by multiplying m's guesses\n        # by the product of the length-(l-1) sequence ending just before m, at m.i - 1.\n        pi *= optimal.pi[m.i - 1][l - 1]\n      # calculate the minimization func\n      g = @factorial(l) * pi\n      unless _exclude_additive\n        g += Math.pow(MIN_GUESSES_BEFORE_GROWING_SEQUENCE, l - 1)\n      # update state if new best.\n      # first see if any competing sequences covering this prefix, with l or fewer matches,\n      # fare better than this sequence. if so, skip it and return.\n      for competing_l, competing_g of optimal.g[k]\n        continue if competing_l > l\n        return if competing_g <= g\n      # this sequence might be part of the final optimal sequence.\n      optimal.g[k][l] = g\n      optimal.m[k][l] = m\n      optimal.pi[k][l] = pi\n\n    # helper: evaluate bruteforce matches ending at k.\n    bruteforce_update = (k) =>\n      # see if a single bruteforce match spanning the k-prefix is optimal.\n      m = make_bruteforce_match(0, k)\n      update(m, 1)\n      for i in [1..k]\n        # generate k bruteforce matches, spanning from (i=1, j=k) up to (i=k, j=k).\n        # see if adding these new matches to any of the sequences in optimal[i-1]\n        # leads to new bests.\n        m = make_bruteforce_match(i, k)\n        for l, last_m of optimal.m[i-1]\n          l = parseInt(l)\n          # corner: an optimal sequence will never have two adjacent bruteforce matches.\n          # it is strictly better to have a single bruteforce match spanning the same region:\n          # same contribution to the guess product with a lower length.\n          # --> safe to skip those cases.\n          continue if last_m.pattern == 'bruteforce'\n          # try adding m to this length-l sequence.\n          update(m, l + 1)\n\n    # helper: make bruteforce match objects spanning i to j, inclusive.\n    make_bruteforce_match = (i, j) =>\n      pattern: 'bruteforce'\n      token: password[i..j]\n      i: i\n      j: j\n\n    # helper: step backwards through optimal.m starting at the end,\n    # constructing the final optimal match sequence.\n    unwind = (n) =>\n      optimal_match_sequence = []\n      k = n - 1\n      # find the final best sequence length and score\n      l = undefined\n      g = Infinity\n      for candidate_l, candidate_g of optimal.g[k]\n        if candidate_g < g\n          l = candidate_l\n          g = candidate_g\n\n      while k >= 0\n        m = optimal.m[k][l]\n        optimal_match_sequence.unshift m\n        k = m.i - 1\n        l--\n      optimal_match_sequence\n\n    for k in [0...n]\n      for m in matches_by_j[k]\n        if m.i > 0\n          for l of optimal.m[m.i - 1]\n            l = parseInt(l)\n            update(m, l + 1)\n        else\n          update(m, 1)\n      bruteforce_update(k)\n    optimal_match_sequence = unwind(n)\n    optimal_l = optimal_match_sequence.length\n\n    # corner: empty password\n    if password.length == 0\n      guesses = 1\n    else\n      guesses = optimal.g[n - 1][optimal_l]\n\n    # final result object\n    password: password\n    guesses: guesses\n    guesses_log10: @log10 guesses\n    sequence: optimal_match_sequence\n\n  # ------------------------------------------------------------------------------\n  # guess estimation -- one function per match pattern ---------------------------\n  # ------------------------------------------------------------------------------\n\n  estimate_guesses: (match, password) ->\n    return match.guesses if match.guesses? # a match's guess estimate doesn't change. cache it.\n    min_guesses = 1\n    if match.token.length < password.length\n      min_guesses = if match.token.length == 1\n        MIN_SUBMATCH_GUESSES_SINGLE_CHAR\n      else\n        MIN_SUBMATCH_GUESSES_MULTI_CHAR\n    estimation_functions =\n      bruteforce: @bruteforce_guesses\n      dictionary: @dictionary_guesses\n      spatial:    @spatial_guesses\n      repeat:     @repeat_guesses\n      sequence:   @sequence_guesses\n      regex:      @regex_guesses\n      date:       @date_guesses\n    guesses = estimation_functions[match.pattern].call this, match\n    match.guesses = Math.max guesses, min_guesses\n    match.guesses_log10 = @log10 match.guesses\n    match.guesses\n\n  bruteforce_guesses: (match) ->\n    guesses = Math.pow BRUTEFORCE_CARDINALITY, match.token.length\n    if guesses == Number.POSITIVE_INFINITY\n        guesses = Number.MAX_VALUE;\n    # small detail: make bruteforce matches at minimum one guess bigger than smallest allowed\n    # submatch guesses, such that non-bruteforce submatches over the same [i..j] take precedence.\n    min_guesses = if match.token.length == 1\n      MIN_SUBMATCH_GUESSES_SINGLE_CHAR + 1\n    else\n      MIN_SUBMATCH_GUESSES_MULTI_CHAR + 1\n    Math.max guesses, min_guesses\n\n  repeat_guesses: (match) ->\n    match.base_guesses * match.repeat_count\n\n  sequence_guesses: (match) ->\n    first_chr = match.token.charAt(0)\n    # lower guesses for obvious starting points\n    if first_chr in ['a', 'A', 'z', 'Z', '0', '1', '9']\n      base_guesses = 4\n    else\n      if first_chr.match /\\d/\n        base_guesses = 10 # digits\n      else\n        # could give a higher base for uppercase,\n        # assigning 26 to both upper and lower sequences is more conservative.\n        base_guesses = 26\n    if not match.ascending\n      # need to try a descending sequence in addition to every ascending sequence ->\n      # 2x guesses\n      base_guesses *= 2\n    base_guesses * match.token.length\n\n  MIN_YEAR_SPACE: 20\n  REFERENCE_YEAR: new Date().getFullYear()\n\n  regex_guesses: (match) ->\n    char_class_bases =\n      alpha_lower:  26\n      alpha_upper:  26\n      alpha:        52\n      alphanumeric: 62\n      digits:       10\n      symbols:      33\n    if match.regex_name of char_class_bases\n      Math.pow(char_class_bases[match.regex_name], match.token.length)\n    else switch match.regex_name\n      when 'recent_year'\n        # conservative estimate of year space: num years from REFERENCE_YEAR.\n        # if year is close to REFERENCE_YEAR, estimate a year space of MIN_YEAR_SPACE.\n        year_space = Math.abs parseInt(match.regex_match[0]) - @REFERENCE_YEAR\n        year_space = Math.max year_space, @MIN_YEAR_SPACE\n        year_space\n\n  date_guesses: (match) ->\n    # base guesses: (year distance from REFERENCE_YEAR) * num_days * num_years\n    year_space = Math.max(Math.abs(match.year - @REFERENCE_YEAR), @MIN_YEAR_SPACE)\n    guesses = year_space * 365\n    # add factor of 4 for separator selection (one of ~4 choices)\n    guesses *= 4 if match.separator\n    guesses\n\n  KEYBOARD_AVERAGE_DEGREE: calc_average_degree(adjacency_graphs.qwerty)\n  # slightly different for keypad/mac keypad, but close enough\n  KEYPAD_AVERAGE_DEGREE: calc_average_degree(adjacency_graphs.keypad)\n\n  KEYBOARD_STARTING_POSITIONS: (k for k,v of adjacency_graphs.qwerty).length\n  KEYPAD_STARTING_POSITIONS: (k for k,v of adjacency_graphs.keypad).length\n\n  spatial_guesses: (match) ->\n    if match.graph in ['qwerty', 'dvorak']\n      s = @KEYBOARD_STARTING_POSITIONS\n      d = @KEYBOARD_AVERAGE_DEGREE\n    else\n      s = @KEYPAD_STARTING_POSITIONS\n      d = @KEYPAD_AVERAGE_DEGREE\n    guesses = 0\n    L = match.token.length\n    t = match.turns\n    # estimate the number of possible patterns w/ length L or less with t turns or less.\n    for i in [2..L]\n      possible_turns = Math.min(t, i - 1)\n      for j in [1..possible_turns]\n        guesses += @nCk(i - 1, j - 1) * s * Math.pow(d, j)\n    # add extra guesses for shifted keys. (% instead of 5, A instead of a.)\n    # math is similar to extra guesses of l33t substitutions in dictionary matches.\n    if match.shifted_count\n      S = match.shifted_count\n      U = match.token.length - match.shifted_count # unshifted count\n      if S == 0 or U == 0\n        guesses *= 2\n      else\n        shifted_variations = 0\n        shifted_variations += @nCk(S + U, i) for i in [1..Math.min(S, U)]\n        guesses *= shifted_variations\n    guesses\n\n  dictionary_guesses: (match) ->\n    match.base_guesses = match.rank # keep these as properties for display purposes\n    match.uppercase_variations = @uppercase_variations match\n    match.l33t_variations = @l33t_variations match\n    reversed_variations = match.reversed and 2 or 1\n    match.base_guesses * match.uppercase_variations * match.l33t_variations * reversed_variations\n\n  START_UPPER: /^[A-Z][^A-Z]+$/\n  END_UPPER: /^[^A-Z]+[A-Z]$/\n  ALL_UPPER: /^[^a-z]+$/\n  ALL_LOWER: /^[^A-Z]+$/\n\n  uppercase_variations: (match) ->\n    word = match.token\n    return 1 if word.match(@ALL_LOWER) or word.toLowerCase() == word\n    # a capitalized word is the most common capitalization scheme,\n    # so it only doubles the search space (uncapitalized + capitalized).\n    # allcaps and end-capitalized are common enough too, underestimate as 2x factor to be safe.\n    for regex in [@START_UPPER, @END_UPPER, @ALL_UPPER]\n      return 2 if word.match regex\n    # otherwise calculate the number of ways to capitalize U+L uppercase+lowercase letters\n    # with U uppercase letters or less. or, if there's more uppercase than lower (for eg. PASSwORD),\n    # the number of ways to lowercase U+L letters with L lowercase letters or less.\n    U = (chr for chr in word.split('') when chr.match /[A-Z]/).length\n    L = (chr for chr in word.split('') when chr.match /[a-z]/).length\n    variations = 0\n    variations += @nCk(U + L, i) for i in [1..Math.min(U, L)]\n    variations\n\n  l33t_variations: (match) ->\n    return 1 if not match.l33t\n    variations = 1\n    for subbed, unsubbed of match.sub\n      # lower-case match.token before calculating: capitalization shouldn't affect l33t calc.\n      chrs = match.token.toLowerCase().split('')\n      S = (chr for chr in chrs when chr == subbed).length   # num of subbed chars\n      U = (chr for chr in chrs when chr == unsubbed).length # num of unsubbed chars\n      if S == 0 or U == 0\n        # for this sub, password is either fully subbed (444) or fully unsubbed (aaa)\n        # treat that as doubling the space (attacker needs to try fully subbed chars in addition to\n        # unsubbed.)\n        variations *= 2\n      else\n        # this case is similar to capitalization:\n        # with aa44a, U = 3, S = 2, attacker needs to try unsubbed + one sub + two subs\n        p = Math.min(U, S)\n        possibilities = 0\n        possibilities += @nCk(U + S, i) for i in [1..p]\n        variations *= possibilities\n    variations\n\n  # utilities --------------------------------------------------------------------\n\nmodule.exports = scoring\n"]},"metadata":{},"sourceType":"script"}