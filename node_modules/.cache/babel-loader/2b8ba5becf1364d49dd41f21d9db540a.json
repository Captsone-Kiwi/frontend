{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isCurrency;\n\nvar _merge = require('./util/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction currencyRegex(options) {\n  var decimal_digits = '\\\\d{' + options.digits_after_decimal[0] + '}';\n  options.digits_after_decimal.forEach(function (digit, index) {\n    if (index !== 0) decimal_digits = decimal_digits + '|\\\\d{' + digit + '}';\n  });\n  var symbol = '(\\\\' + options.symbol.replace(/\\./g, '\\\\.') + ')' + (options.require_symbol ? '' : '?'),\n      negative = '-?',\n      whole_dollar_amount_without_sep = '[1-9]\\\\d*',\n      whole_dollar_amount_with_sep = '[1-9]\\\\d{0,2}(\\\\' + options.thousands_separator + '\\\\d{3})*',\n      valid_whole_dollar_amounts = ['0', whole_dollar_amount_without_sep, whole_dollar_amount_with_sep],\n      whole_dollar_amount = '(' + valid_whole_dollar_amounts.join('|') + ')?',\n      decimal_amount = '(\\\\' + options.decimal_separator + '(' + decimal_digits + '))' + (options.require_decimal ? '' : '?');\n  var pattern = whole_dollar_amount + (options.allow_decimal || options.require_decimal ? decimal_amount : ''); // default is negative sign before symbol, but there are two other options (besides parens)\n\n  if (options.allow_negatives && !options.parens_for_negatives) {\n    if (options.negative_sign_after_digits) {\n      pattern += negative;\n    } else if (options.negative_sign_before_digits) {\n      pattern = negative + pattern;\n    }\n  } // South African Rand, for example, uses R 123 (space) and R-123 (no space)\n\n\n  if (options.allow_negative_sign_placeholder) {\n    pattern = '( (?!\\\\-))?' + pattern;\n  } else if (options.allow_space_after_symbol) {\n    pattern = ' ?' + pattern;\n  } else if (options.allow_space_after_digits) {\n    pattern += '( (?!$))?';\n  }\n\n  if (options.symbol_after_digits) {\n    pattern += symbol;\n  } else {\n    pattern = symbol + pattern;\n  }\n\n  if (options.allow_negatives) {\n    if (options.parens_for_negatives) {\n      pattern = '(\\\\(' + pattern + '\\\\)|' + pattern + ')';\n    } else if (!(options.negative_sign_before_digits || options.negative_sign_after_digits)) {\n      pattern = negative + pattern;\n    }\n  } // ensure there's a dollar and/or decimal amount, and that\n  // it doesn't start with a space or a negative sign followed by a space\n\n\n  return new RegExp('^(?!-? )(?=.*\\\\d)' + pattern + '$');\n}\n\nvar default_currency_options = {\n  symbol: '$',\n  require_symbol: false,\n  allow_space_after_symbol: false,\n  symbol_after_digits: false,\n  allow_negatives: true,\n  parens_for_negatives: false,\n  negative_sign_before_digits: false,\n  negative_sign_after_digits: false,\n  allow_negative_sign_placeholder: false,\n  thousands_separator: ',',\n  decimal_separator: '.',\n  allow_decimal: true,\n  require_decimal: false,\n  digits_after_decimal: [2],\n  allow_space_after_digits: false\n};\n\nfunction isCurrency(str, options) {\n  (0, _assertString2.default)(str);\n  options = (0, _merge2.default)(options, default_currency_options);\n  return currencyRegex(options).test(str);\n}\n\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/Users/100s/Documents/GitHub/frontend/node_modules/validator/lib/isCurrency.js"],"names":["Object","defineProperty","exports","value","default","isCurrency","_merge","require","_merge2","_interopRequireDefault","_assertString","_assertString2","obj","__esModule","currencyRegex","options","decimal_digits","digits_after_decimal","forEach","digit","index","symbol","replace","require_symbol","negative","whole_dollar_amount_without_sep","whole_dollar_amount_with_sep","thousands_separator","valid_whole_dollar_amounts","whole_dollar_amount","join","decimal_amount","decimal_separator","require_decimal","pattern","allow_decimal","allow_negatives","parens_for_negatives","negative_sign_after_digits","negative_sign_before_digits","allow_negative_sign_placeholder","allow_space_after_symbol","allow_space_after_digits","symbol_after_digits","RegExp","default_currency_options","str","test","module"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isCurrency;\n\nvar _merge = require('./util/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction currencyRegex(options) {\n  var decimal_digits = '\\\\d{' + options.digits_after_decimal[0] + '}';\n  options.digits_after_decimal.forEach(function (digit, index) {\n    if (index !== 0) decimal_digits = decimal_digits + '|\\\\d{' + digit + '}';\n  });\n  var symbol = '(\\\\' + options.symbol.replace(/\\./g, '\\\\.') + ')' + (options.require_symbol ? '' : '?'),\n      negative = '-?',\n      whole_dollar_amount_without_sep = '[1-9]\\\\d*',\n      whole_dollar_amount_with_sep = '[1-9]\\\\d{0,2}(\\\\' + options.thousands_separator + '\\\\d{3})*',\n      valid_whole_dollar_amounts = ['0', whole_dollar_amount_without_sep, whole_dollar_amount_with_sep],\n      whole_dollar_amount = '(' + valid_whole_dollar_amounts.join('|') + ')?',\n      decimal_amount = '(\\\\' + options.decimal_separator + '(' + decimal_digits + '))' + (options.require_decimal ? '' : '?');\n  var pattern = whole_dollar_amount + (options.allow_decimal || options.require_decimal ? decimal_amount : '');\n\n  // default is negative sign before symbol, but there are two other options (besides parens)\n  if (options.allow_negatives && !options.parens_for_negatives) {\n    if (options.negative_sign_after_digits) {\n      pattern += negative;\n    } else if (options.negative_sign_before_digits) {\n      pattern = negative + pattern;\n    }\n  }\n\n  // South African Rand, for example, uses R 123 (space) and R-123 (no space)\n  if (options.allow_negative_sign_placeholder) {\n    pattern = '( (?!\\\\-))?' + pattern;\n  } else if (options.allow_space_after_symbol) {\n    pattern = ' ?' + pattern;\n  } else if (options.allow_space_after_digits) {\n    pattern += '( (?!$))?';\n  }\n\n  if (options.symbol_after_digits) {\n    pattern += symbol;\n  } else {\n    pattern = symbol + pattern;\n  }\n\n  if (options.allow_negatives) {\n    if (options.parens_for_negatives) {\n      pattern = '(\\\\(' + pattern + '\\\\)|' + pattern + ')';\n    } else if (!(options.negative_sign_before_digits || options.negative_sign_after_digits)) {\n      pattern = negative + pattern;\n    }\n  }\n\n  // ensure there's a dollar and/or decimal amount, and that\n  // it doesn't start with a space or a negative sign followed by a space\n  return new RegExp('^(?!-? )(?=.*\\\\d)' + pattern + '$');\n}\n\nvar default_currency_options = {\n  symbol: '$',\n  require_symbol: false,\n  allow_space_after_symbol: false,\n  symbol_after_digits: false,\n  allow_negatives: true,\n  parens_for_negatives: false,\n  negative_sign_before_digits: false,\n  negative_sign_after_digits: false,\n  allow_negative_sign_placeholder: false,\n  thousands_separator: ',',\n  decimal_separator: '.',\n  allow_decimal: true,\n  require_decimal: false,\n  digits_after_decimal: [2],\n  allow_space_after_digits: false\n};\n\nfunction isCurrency(str, options) {\n  (0, _assertString2.default)(str);\n  options = (0, _merge2.default)(options, default_currency_options);\n  return currencyRegex(options).test(str);\n}\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}