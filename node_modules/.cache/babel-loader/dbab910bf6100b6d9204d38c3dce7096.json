{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = flexboxIE;\nvar alternativeValues = {\n  'space-around': 'distribute',\n  'space-between': 'justify',\n  'flex-start': 'start',\n  'flex-end': 'end'\n};\nvar alternativeProps = {\n  alignContent: 'msFlexLinePack',\n  alignSelf: 'msFlexItemAlign',\n  alignItems: 'msFlexAlign',\n  justifyContent: 'msFlexPack',\n  order: 'msFlexOrder',\n  flexGrow: 'msFlexPositive',\n  flexShrink: 'msFlexNegative',\n  flexBasis: 'msFlexPreferredSize' // Full expanded syntax is flex-grow | flex-shrink | flex-basis.\n\n};\nvar flexShorthandMappings = {\n  auto: '1 1 auto',\n  inherit: 'inherit',\n  initial: '0 1 auto',\n  none: '0 0 auto',\n  unset: 'unset'\n};\nvar isUnitlessNumber = /^\\d+(\\.\\d+)?$/;\nvar logTag = 'inline-style-prefixer.flexboxIE plugin';\n\nfunction flexboxIE(property, value, style) {\n  if (Object.prototype.hasOwnProperty.call(alternativeProps, property)) {\n    style[alternativeProps[property]] = alternativeValues[value] || value;\n  }\n\n  if (property === 'flex') {\n    // For certain values we can do straight mappings based on the spec\n    // for the expansions.\n    if (Object.prototype.hasOwnProperty.call(flexShorthandMappings, value)) {\n      style.msFlex = flexShorthandMappings[value];\n      return;\n    } // Here we have no direct mapping, so we favor looking for a\n    // unitless positive number as that will be the most common use-case.\n\n\n    if (isUnitlessNumber.test(value)) {\n      style.msFlex = value + ' 1 0%';\n      return;\n    }\n\n    if (typeof value === 'number' && value < 0) {\n      // ignore negative values;\n      console.warn(logTag + ': \"flex: ' + value + '\", negative values is not valid and will be ignored.');\n      return;\n    }\n\n    if (!value.split) {\n      console.warn(logTag + ': \"flex: ' + value + '\", value format is not detected, it will be remain as is');\n      style.msFlex = value;\n      return;\n    } // The next thing we can look for is if there are multiple values.\n\n\n    var flexValues = value.split(/\\s/); // If we only have a single value that wasn't a positive unitless\n    // or a pre-mapped value, then we can assume it is a unit value.\n\n    switch (flexValues.length) {\n      case 1:\n        style.msFlex = '1 1 ' + value;\n        return;\n\n      case 2:\n        // If we have 2 units, then we expect that the first will\n        // always be a unitless number and represents flex-grow.\n        // The second unit will represent flex-shrink for a unitless\n        // value, or flex-basis otherwise.\n        if (isUnitlessNumber.test(flexValues[1])) {\n          style.msFlex = flexValues[0] + ' ' + flexValues[1] + ' 0%';\n        } else {\n          style.msFlex = flexValues[0] + ' 1 ' + flexValues[1];\n        }\n\n        return;\n\n      default:\n        style.msFlex = value;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/100s/Documents/GitHub/frontend/node_modules/inline-style-prefixer/lib/plugins/flexboxIE.js"],"names":["Object","defineProperty","exports","value","default","flexboxIE","alternativeValues","alternativeProps","alignContent","alignSelf","alignItems","justifyContent","order","flexGrow","flexShrink","flexBasis","flexShorthandMappings","auto","inherit","initial","none","unset","isUnitlessNumber","logTag","property","style","prototype","hasOwnProperty","call","msFlex","test","console","warn","split","flexValues","length"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = flexboxIE;\nvar alternativeValues = {\n  'space-around': 'distribute',\n  'space-between': 'justify',\n  'flex-start': 'start',\n  'flex-end': 'end'\n};\nvar alternativeProps = {\n  alignContent: 'msFlexLinePack',\n  alignSelf: 'msFlexItemAlign',\n  alignItems: 'msFlexAlign',\n  justifyContent: 'msFlexPack',\n  order: 'msFlexOrder',\n  flexGrow: 'msFlexPositive',\n  flexShrink: 'msFlexNegative',\n  flexBasis: 'msFlexPreferredSize'\n  // Full expanded syntax is flex-grow | flex-shrink | flex-basis.\n};var flexShorthandMappings = {\n  auto: '1 1 auto',\n  inherit: 'inherit',\n  initial: '0 1 auto',\n  none: '0 0 auto',\n  unset: 'unset'\n};\nvar isUnitlessNumber = /^\\d+(\\.\\d+)?$/;\nvar logTag = 'inline-style-prefixer.flexboxIE plugin';\nfunction flexboxIE(property, value, style) {\n  if (Object.prototype.hasOwnProperty.call(alternativeProps, property)) {\n    style[alternativeProps[property]] = alternativeValues[value] || value;\n  }\n  if (property === 'flex') {\n    // For certain values we can do straight mappings based on the spec\n    // for the expansions.\n    if (Object.prototype.hasOwnProperty.call(flexShorthandMappings, value)) {\n      style.msFlex = flexShorthandMappings[value];\n      return;\n    }\n    // Here we have no direct mapping, so we favor looking for a\n    // unitless positive number as that will be the most common use-case.\n    if (isUnitlessNumber.test(value)) {\n      style.msFlex = value + ' 1 0%';\n      return;\n    }\n\n    if (typeof value === 'number' && value < 0) {\n      // ignore negative values;\n      console.warn(logTag + ': \"flex: ' + value + '\", negative values is not valid and will be ignored.');\n      return;\n    }\n\n    if (!value.split) {\n      console.warn(logTag + ': \"flex: ' + value + '\", value format is not detected, it will be remain as is');\n      style.msFlex = value;\n      return;\n    }\n\n    // The next thing we can look for is if there are multiple values.\n    var flexValues = value.split(/\\s/);\n    // If we only have a single value that wasn't a positive unitless\n    // or a pre-mapped value, then we can assume it is a unit value.\n    switch (flexValues.length) {\n      case 1:\n        style.msFlex = '1 1 ' + value;\n        return;\n      case 2:\n        // If we have 2 units, then we expect that the first will\n        // always be a unitless number and represents flex-grow.\n        // The second unit will represent flex-shrink for a unitless\n        // value, or flex-basis otherwise.\n        if (isUnitlessNumber.test(flexValues[1])) {\n          style.msFlex = flexValues[0] + ' ' + flexValues[1] + ' 0%';\n        } else {\n          style.msFlex = flexValues[0] + ' 1 ' + flexValues[1];\n        }\n        return;\n      default:\n        style.msFlex = value;\n    }\n  }\n}"]},"metadata":{},"sourceType":"script"}