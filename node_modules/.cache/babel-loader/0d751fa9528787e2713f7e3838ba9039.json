{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isDecimal;\n\nvar _merge = require('./util/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nvar _alpha = require('./alpha');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction decimalRegExp(options) {\n  var regExp = new RegExp('^[-+]?([0-9]+)?(\\\\' + _alpha.decimal[options.locale] + '[0-9]{' + options.decimal_digits + '})' + (options.force_decimal ? '' : '?') + '$');\n  return regExp;\n}\n\nvar default_decimal_options = {\n  force_decimal: false,\n  decimal_digits: '1,',\n  locale: 'en-US'\n};\nvar blacklist = ['', '-', '+'];\n\nfunction isDecimal(str, options) {\n  (0, _assertString2.default)(str);\n  options = (0, _merge2.default)(options, default_decimal_options);\n\n  if (options.locale in _alpha.decimal) {\n    return !blacklist.includes(str.replace(/ /g, '')) && decimalRegExp(options).test(str);\n  }\n\n  throw new Error('Invalid locale \\'' + options.locale + '\\'');\n}\n\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/Users/100s/Documents/GitHub/frontend/node_modules/validator/lib/isDecimal.js"],"names":["Object","defineProperty","exports","value","default","isDecimal","_merge","require","_merge2","_interopRequireDefault","_assertString","_assertString2","_alpha","obj","__esModule","decimalRegExp","options","regExp","RegExp","decimal","locale","decimal_digits","force_decimal","default_decimal_options","blacklist","str","includes","replace","test","Error","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,SAAlB;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,cAAD,CAApB;;AAEA,IAAIC,OAAO,GAAGC,sBAAsB,CAACH,MAAD,CAApC;;AAEA,IAAII,aAAa,GAAGH,OAAO,CAAC,qBAAD,CAA3B;;AAEA,IAAII,cAAc,GAAGF,sBAAsB,CAACC,aAAD,CAA3C;;AAEA,IAAIE,MAAM,GAAGL,OAAO,CAAC,SAAD,CAApB;;AAEA,SAASE,sBAAT,CAAgCI,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAET,IAAAA,OAAO,EAAES;AAAX,GAArC;AAAwD;;AAE/F,SAASE,aAAT,CAAuBC,OAAvB,EAAgC;AAC9B,MAAIC,MAAM,GAAG,IAAIC,MAAJ,CAAW,uBAAuBN,MAAM,CAACO,OAAP,CAAeH,OAAO,CAACI,MAAvB,CAAvB,GAAwD,QAAxD,GAAmEJ,OAAO,CAACK,cAA3E,GAA4F,IAA5F,IAAoGL,OAAO,CAACM,aAAR,GAAwB,EAAxB,GAA6B,GAAjI,IAAwI,GAAnJ,CAAb;AACA,SAAOL,MAAP;AACD;;AAED,IAAIM,uBAAuB,GAAG;AAC5BD,EAAAA,aAAa,EAAE,KADa;AAE5BD,EAAAA,cAAc,EAAE,IAFY;AAG5BD,EAAAA,MAAM,EAAE;AAHoB,CAA9B;AAMA,IAAII,SAAS,GAAG,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,CAAhB;;AAEA,SAASnB,SAAT,CAAmBoB,GAAnB,EAAwBT,OAAxB,EAAiC;AAC/B,GAAC,GAAGL,cAAc,CAACP,OAAnB,EAA4BqB,GAA5B;AACAT,EAAAA,OAAO,GAAG,CAAC,GAAGR,OAAO,CAACJ,OAAZ,EAAqBY,OAArB,EAA8BO,uBAA9B,CAAV;;AACA,MAAIP,OAAO,CAACI,MAAR,IAAkBR,MAAM,CAACO,OAA7B,EAAsC;AACpC,WAAO,CAACK,SAAS,CAACE,QAAV,CAAmBD,GAAG,CAACE,OAAJ,CAAY,IAAZ,EAAkB,EAAlB,CAAnB,CAAD,IAA8CZ,aAAa,CAACC,OAAD,CAAb,CAAuBY,IAAvB,CAA4BH,GAA5B,CAArD;AACD;;AACD,QAAM,IAAII,KAAJ,CAAU,sBAAsBb,OAAO,CAACI,MAA9B,GAAuC,IAAjD,CAAN;AACD;;AACDU,MAAM,CAAC5B,OAAP,GAAiBA,OAAO,CAAC,SAAD,CAAxB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isDecimal;\n\nvar _merge = require('./util/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nvar _alpha = require('./alpha');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction decimalRegExp(options) {\n  var regExp = new RegExp('^[-+]?([0-9]+)?(\\\\' + _alpha.decimal[options.locale] + '[0-9]{' + options.decimal_digits + '})' + (options.force_decimal ? '' : '?') + '$');\n  return regExp;\n}\n\nvar default_decimal_options = {\n  force_decimal: false,\n  decimal_digits: '1,',\n  locale: 'en-US'\n};\n\nvar blacklist = ['', '-', '+'];\n\nfunction isDecimal(str, options) {\n  (0, _assertString2.default)(str);\n  options = (0, _merge2.default)(options, default_decimal_options);\n  if (options.locale in _alpha.decimal) {\n    return !blacklist.includes(str.replace(/ /g, '')) && decimalRegExp(options).test(str);\n  }\n  throw new Error('Invalid locale \\'' + options.locale + '\\'');\n}\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}