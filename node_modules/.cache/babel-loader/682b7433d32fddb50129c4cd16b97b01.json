{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\n\nvar global = require('../internals/global');\n\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\n\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\n\nvar toObject = require('../internals/to-object');\n\nvar arraySpeciesCreate = require('../internals/array-species-create');\n\nvar createProperty = require('../internals/create-property');\n\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');\nvar TypeError = global.TypeError;\nvar max = Math.max;\nvar min = Math.min;\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;\nvar MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded'; // `Array.prototype.splice` method\n// https://tc39.es/ecma262/#sec-array.prototype.splice\n// with adding support of @@species\n\n$({\n  target: 'Array',\n  proto: true,\n  forced: !HAS_SPECIES_SUPPORT\n}, {\n  splice: function splice(start, deleteCount\n  /* , ...items */\n  ) {\n    var O = toObject(this);\n    var len = lengthOfArrayLike(O);\n    var actualStart = toAbsoluteIndex(start, len);\n    var argumentsLength = arguments.length;\n    var insertCount, actualDeleteCount, A, k, from, to;\n\n    if (argumentsLength === 0) {\n      insertCount = actualDeleteCount = 0;\n    } else if (argumentsLength === 1) {\n      insertCount = 0;\n      actualDeleteCount = len - actualStart;\n    } else {\n      insertCount = argumentsLength - 2;\n      actualDeleteCount = min(max(toIntegerOrInfinity(deleteCount), 0), len - actualStart);\n    }\n\n    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {\n      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);\n    }\n\n    A = arraySpeciesCreate(O, actualDeleteCount);\n\n    for (k = 0; k < actualDeleteCount; k++) {\n      from = actualStart + k;\n      if (from in O) createProperty(A, k, O[from]);\n    }\n\n    A.length = actualDeleteCount;\n\n    if (insertCount < actualDeleteCount) {\n      for (k = actualStart; k < len - actualDeleteCount; k++) {\n        from = k + actualDeleteCount;\n        to = k + insertCount;\n        if (from in O) O[to] = O[from];else delete O[to];\n      }\n\n      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];\n    } else if (insertCount > actualDeleteCount) {\n      for (k = len - actualDeleteCount; k > actualStart; k--) {\n        from = k + actualDeleteCount - 1;\n        to = k + insertCount - 1;\n        if (from in O) O[to] = O[from];else delete O[to];\n      }\n    }\n\n    for (k = 0; k < insertCount; k++) {\n      O[k + actualStart] = arguments[k + 2];\n    }\n\n    O.length = len - actualDeleteCount + insertCount;\n    return A;\n  }\n});","map":{"version":3,"sources":["/Users/100s/Documents/GitHub/frontend/node_modules/core-js-pure/modules/es.array.splice.js"],"names":["$","require","global","toAbsoluteIndex","toIntegerOrInfinity","lengthOfArrayLike","toObject","arraySpeciesCreate","createProperty","arrayMethodHasSpeciesSupport","HAS_SPECIES_SUPPORT","TypeError","max","Math","min","MAX_SAFE_INTEGER","MAXIMUM_ALLOWED_LENGTH_EXCEEDED","target","proto","forced","splice","start","deleteCount","O","len","actualStart","argumentsLength","arguments","length","insertCount","actualDeleteCount","A","k","from","to"],"mappings":"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","sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar toObject = require('../internals/to-object');\nvar arraySpeciesCreate = require('../internals/array-species-create');\nvar createProperty = require('../internals/create-property');\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');\n\nvar TypeError = global.TypeError;\nvar max = Math.max;\nvar min = Math.min;\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;\nvar MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';\n\n// `Array.prototype.splice` method\n// https://tc39.es/ecma262/#sec-array.prototype.splice\n// with adding support of @@species\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {\n  splice: function splice(start, deleteCount /* , ...items */) {\n    var O = toObject(this);\n    var len = lengthOfArrayLike(O);\n    var actualStart = toAbsoluteIndex(start, len);\n    var argumentsLength = arguments.length;\n    var insertCount, actualDeleteCount, A, k, from, to;\n    if (argumentsLength === 0) {\n      insertCount = actualDeleteCount = 0;\n    } else if (argumentsLength === 1) {\n      insertCount = 0;\n      actualDeleteCount = len - actualStart;\n    } else {\n      insertCount = argumentsLength - 2;\n      actualDeleteCount = min(max(toIntegerOrInfinity(deleteCount), 0), len - actualStart);\n    }\n    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {\n      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);\n    }\n    A = arraySpeciesCreate(O, actualDeleteCount);\n    for (k = 0; k < actualDeleteCount; k++) {\n      from = actualStart + k;\n      if (from in O) createProperty(A, k, O[from]);\n    }\n    A.length = actualDeleteCount;\n    if (insertCount < actualDeleteCount) {\n      for (k = actualStart; k < len - actualDeleteCount; k++) {\n        from = k + actualDeleteCount;\n        to = k + insertCount;\n        if (from in O) O[to] = O[from];\n        else delete O[to];\n      }\n      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];\n    } else if (insertCount > actualDeleteCount) {\n      for (k = len - actualDeleteCount; k > actualStart; k--) {\n        from = k + actualDeleteCount - 1;\n        to = k + insertCount - 1;\n        if (from in O) O[to] = O[from];\n        else delete O[to];\n      }\n    }\n    for (k = 0; k < insertCount; k++) {\n      O[k + actualStart] = arguments[k + 2];\n    }\n    O.length = len - actualDeleteCount + insertCount;\n    return A;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}