{"ast":null,"code":"// Generated by CoffeeScript 1.10.0\nvar time_estimates;\ntime_estimates = {\n  estimate_attack_times: function (guesses) {\n    var crack_times_display, crack_times_seconds, scenario, seconds;\n    crack_times_seconds = {\n      online_throttling_100_per_hour: guesses / (100 / 3600),\n      online_no_throttling_10_per_second: guesses / 10,\n      offline_slow_hashing_1e4_per_second: guesses / 1e4,\n      offline_fast_hashing_1e10_per_second: guesses / 1e10\n    };\n    crack_times_display = {};\n\n    for (scenario in crack_times_seconds) {\n      seconds = crack_times_seconds[scenario];\n      crack_times_display[scenario] = this.display_time(seconds);\n    }\n\n    return {\n      crack_times_seconds: crack_times_seconds,\n      crack_times_display: crack_times_display,\n      score: this.guesses_to_score(guesses)\n    };\n  },\n  guesses_to_score: function (guesses) {\n    var DELTA;\n    DELTA = 5;\n\n    if (guesses < 1e3 + DELTA) {\n      return 0;\n    } else if (guesses < 1e6 + DELTA) {\n      return 1;\n    } else if (guesses < 1e8 + DELTA) {\n      return 2;\n    } else if (guesses < 1e10 + DELTA) {\n      return 3;\n    } else {\n      return 4;\n    }\n  },\n  display_time: function (seconds) {\n    var base, century, day, display_num, display_str, hour, minute, month, ref, year;\n    minute = 60;\n    hour = minute * 60;\n    day = hour * 24;\n    month = day * 31;\n    year = month * 12;\n    century = year * 100;\n    ref = seconds < 1 ? [null, 'less than a second'] : seconds < minute ? (base = Math.round(seconds), [base, base + \" second\"]) : seconds < hour ? (base = Math.round(seconds / minute), [base, base + \" minute\"]) : seconds < day ? (base = Math.round(seconds / hour), [base, base + \" hour\"]) : seconds < month ? (base = Math.round(seconds / day), [base, base + \" day\"]) : seconds < year ? (base = Math.round(seconds / month), [base, base + \" month\"]) : seconds < century ? (base = Math.round(seconds / year), [base, base + \" year\"]) : [null, 'centuries'], display_num = ref[0], display_str = ref[1];\n\n    if (display_num != null && display_num !== 1) {\n      display_str += 's';\n    }\n\n    return display_str;\n  }\n};\nmodule.exports = time_estimates;","map":{"version":3,"mappings":";AAAA;AAAAA,iBACE;AAAAC,yBAAuB,UAACC,OAAD;AACrB;AAAAC,0BACE;AAAAC,sCAAgCF,WAAW,MAAM,IAAjB,CAAhC;AACAG,0CAAoCH,UAAU,EAD9C;AAEAI,2CAAqCJ,UAAU,GAF/C;AAGAK,4CAAsCL,UAAU;AAHhD,KADF;AAMAM,0BAAsB,EAAtB;;AACA;;AACEA,yBAAoB,UAApB,GAAgC,KAACC,YAAD,CAAcC,OAAd,CAAhC;AADF;;WAGA;AAAAP,2BAAqBA,mBAArB;AACAK,2BAAqBA,mBADrB;AAEAG,aAAO,KAACC,gBAAD,CAAkBV,OAAlB;AAFP;AAXF;AAgBAU,oBAAkB,UAACV,OAAD;AAChB;AAAAW,YAAQ,CAAR;;AACA,QAAGX,UAAU,MAAMW,KAAnB;aAEE;AAFF,WAGK,IAAGX,UAAU,MAAMW,KAAnB;aAEH;AAFG,WAGA,IAAGX,UAAU,MAAMW,KAAnB;aAEH;AAFG,WAGA,IAAGX,UAAU,OAAOW,KAApB;aAGH;AAHG;aAMH;;AAjCJ;AAmCAJ,gBAAc,UAACC,OAAD;AACZ;AAAAI,aAAS,EAAT;AACAC,WAAOD,SAAS,EAAhB;AACAE,UAAMD,OAAO,EAAb;AACAE,YAAQD,MAAM,EAAd;AACAE,WAAOD,QAAQ,EAAf;AACAE,cAAUD,OAAO,GAAjB;AACAE,UAAgCV,UAAU,CAAV,GAC9B,CAAC,IAAD,EAAO,oBAAP,CAD8B,GAExBA,UAAUI,MAAV,IACNO,OAAOC,IAAI,CAACC,KAAL,CAAWb,OAAX,CAAP,EACA,CAACW,IAAD,EAAUA,IAAD,GAAM,SAAf,CAFM,IAGAX,UAAUK,IAAV,IACNM,OAAOC,IAAI,CAACC,KAAL,CAAWb,UAAUI,MAArB,CAAP,EACA,CAACO,IAAD,EAAUA,IAAD,GAAM,SAAf,CAFM,IAGAX,UAAUM,GAAV,IACNK,OAAOC,IAAI,CAACC,KAAL,CAAWb,UAAUK,IAArB,CAAP,EACA,CAACM,IAAD,EAAUA,IAAD,GAAM,OAAf,CAFM,IAGAX,UAAUO,KAAV,IACNI,OAAOC,IAAI,CAACC,KAAL,CAAWb,UAAUM,GAArB,CAAP,EACA,CAACK,IAAD,EAAUA,IAAD,GAAM,MAAf,CAFM,IAGAX,UAAUQ,IAAV,IACNG,OAAOC,IAAI,CAACC,KAAL,CAAWb,UAAUO,KAArB,CAAP,EACA,CAACI,IAAD,EAAUA,IAAD,GAAM,QAAf,CAFM,IAGAX,UAAUS,OAAV,IACNE,OAAOC,IAAI,CAACC,KAAL,CAAWb,UAAUQ,IAArB,CAAP,EACA,CAACG,IAAD,EAAUA,IAAD,GAAM,OAAf,CAFM,IAIN,CAAC,IAAD,EAAO,WAAP,CArBF,EAACG,oBAAD,EAAcC,oBAAd;;AAsBA,QAAsBD,uBAAiBA,gBAAe,CAAtD;AAAAC,qBAAe,GAAf;;;WACAA;AAjEF;AAAA,CADF;AAoEAC,MAAM,CAACC,OAAP,GAAiB3B,cAAjB","names":["time_estimates","estimate_attack_times","guesses","crack_times_seconds","online_throttling_100_per_hour","online_no_throttling_10_per_second","offline_slow_hashing_1e4_per_second","offline_fast_hashing_1e10_per_second","crack_times_display","display_time","seconds","score","guesses_to_score","DELTA","minute","hour","day","month","year","century","ref","base","Math","round","display_num","display_str","module","exports"],"sources":["/Users/100s/Documents/GitHub/frontend/node_modules/zxcvbn/src/time_estimates.coffee"],"sourcesContent":["time_estimates =\n  estimate_attack_times: (guesses) ->\n    crack_times_seconds =\n      online_throttling_100_per_hour: guesses / (100 / 3600)\n      online_no_throttling_10_per_second: guesses / 10\n      offline_slow_hashing_1e4_per_second: guesses / 1e4\n      offline_fast_hashing_1e10_per_second: guesses / 1e10\n\n    crack_times_display = {}\n    for scenario, seconds of crack_times_seconds\n      crack_times_display[scenario] = @display_time seconds\n\n    crack_times_seconds: crack_times_seconds\n    crack_times_display: crack_times_display\n    score: @guesses_to_score guesses\n\n\n  guesses_to_score: (guesses) ->\n    DELTA = 5\n    if guesses < 1e3 + DELTA\n      # risky password: \"too guessable\"\n      0\n    else if guesses < 1e6 + DELTA\n      # modest protection from throttled online attacks: \"very guessable\"\n      1\n    else if guesses < 1e8 + DELTA\n      # modest protection from unthrottled online attacks: \"somewhat guessable\"\n      2\n    else if guesses < 1e10 + DELTA\n      # modest protection from offline attacks: \"safely unguessable\"\n      # assuming a salted, slow hash function like bcrypt, scrypt, PBKDF2, argon, etc\n      3\n    else\n      # strong protection from offline attacks under same scenario: \"very unguessable\"\n      4\n\n  display_time: (seconds) ->\n    minute = 60\n    hour = minute * 60\n    day = hour * 24\n    month = day * 31\n    year = month * 12\n    century = year * 100\n    [display_num, display_str] = if seconds < 1\n      [null, 'less than a second']\n    else if seconds < minute\n      base = Math.round seconds\n      [base, \"#{base} second\"]\n    else if seconds < hour\n      base = Math.round seconds / minute\n      [base, \"#{base} minute\"]\n    else if seconds < day\n      base = Math.round seconds / hour\n      [base, \"#{base} hour\"]\n    else if seconds < month\n      base = Math.round seconds / day\n      [base, \"#{base} day\"]\n    else if seconds < year\n      base = Math.round seconds / month\n      [base, \"#{base} month\"]\n    else if seconds < century\n      base = Math.round seconds / year\n      [base, \"#{base} year\"]\n    else\n      [null, 'centuries']\n    display_str += 's' if display_num? and display_num != 1\n    display_str\n\nmodule.exports = time_estimates\n"]},"metadata":{},"sourceType":"script"}