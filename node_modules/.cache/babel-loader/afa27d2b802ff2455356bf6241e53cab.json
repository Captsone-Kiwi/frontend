{"ast":null,"code":"var _jsxFileName = \"/Users/100s/Documents/GitHub/frontend/src/pages/Room.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport styled from \"styled-components\";\nimport { useLocation } from \"react-router-dom\";\nimport queryString from 'query-string';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n    padding: 20px;\n    display: flex;\n    height: 100vh;\n    width: 90%;\n    margin: auto;\n    flex-wrap: wrap;\n`;\n_c = Container;\nconst CONSTRAINTS = {\n  video: true\n}; // const Video = (props) => {\n//     const ref = useRef();\n//     useEffect(() => {\n//         props.peer.on(\"stream\", stream => {\n//             ref.current.srcObject = stream;\n//         })\n//     }, []);\n//     return (\n//         <StyledVideo playsInline autoPlay ref={ref} />\n//     );\n// }\n\nconst videoConstraints = {\n  height: window.innerHeight / 2,\n  width: window.innerWidth / 2\n};\n\nconst Room = props => {\n  _s();\n\n  const [peers, setPeers] = useState([]);\n  const [id, setID] = useState('');\n  const [roomID, setRoomID] = useState('');\n  const socketRef = useRef();\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n  const location = useLocation().search;\n  const stream = navigator.mediaDevices.getUserMedia(CONSTRAINTS); // const roomID = queryString.parse(location);\n  // const roomID = 1234;\n  // useEffect(() => {\n  //     const {id, roomID} = queryString.parse(location);\n  //     socketRef.current = io.connect(\"/\");\n  // navigator.mediaDevices.getUserMedia({ video: videoConstraints, audio: true }).then(stream => {\n  //     userVideo.current.srcObject = stream;\n  //         socketRef.current.emit(\"join room\", {id, roomID});\n  //         socketRef.current.on(\"all users\", users => {\n  //             const peers = [];\n  //             users.forEach(userID => {\n  //                 const peer = createPeer(userID, socketRef.current.id, stream);\n  //                 peersRef.current.push({\n  //                     peerID: userID,\n  //                     peer,\n  //                 })\n  //                 peers.push(peer);\n  //             })\n  //             setPeers(peers);\n  // })\n  //         socketRef.current.on(\"user joined\", payload => {\n  //             const peer = addPeer(payload.signal, payload.callerID, stream);\n  //             peersRef.current.push({\n  //                 peerID: payload.callerID,\n  //                 peer,\n  //             })\n  //             setPeers(users => [...users, peer]);\n  //         });\n  //         socketRef.current.on(\"receiving returned signal\", payload => {\n  //             const item = peersRef.current.find(p => p.peerID === payload.id);\n  //             item.peer.signal(payload.signal);\n  //         });\n  //     })\n  // }, []);\n  // function createPeer(userToSignal, callerID, stream) {\n  //     const peer = new Peer({\n  //         initiator: true,\n  //         trickle: false,\n  //         stream,\n  //     });\n  //     peer.on(\"signal\", signal => {\n  //         socketRef.current.emit(\"sending signal\", { userToSignal, callerID, signal })\n  //     })\n  //     return peer;\n  // }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videos,\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: true\n      }).then(mediaStream => {\n        videos.current.srcObject = mediaStream;\n\n        videos.current.onloadedmetadata = function (e) {\n          videos.current.play();\n        };\n      }),\n      children: \"Record\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Room, \"pmBZ34zs8kWMorsymWpVSThsS/U=\", false, function () {\n  return [useLocation];\n});\n\n_c2 = Room;\nexport default Room;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Room\");","map":{"version":3,"sources":["/Users/100s/Documents/GitHub/frontend/src/pages/Room.js"],"names":["React","useEffect","useRef","useState","io","Peer","styled","useLocation","queryString","Container","div","CONSTRAINTS","video","videoConstraints","height","window","innerHeight","width","innerWidth","Room","props","peers","setPeers","id","setID","roomID","setRoomID","socketRef","userVideo","peersRef","location","search","stream","navigator","mediaDevices","getUserMedia","videos","audio","then","mediaStream","current","srcObject","onloadedmetadata","e","play"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,WAAP,MAAwB,cAAxB;;AAGA,MAAMC,SAAS,GAAGH,MAAM,CAACI,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;KAAMD,S;AAQN,MAAME,WAAW,GAAG;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAApB,C,CAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAGA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,MAAM,EAAEC,MAAM,CAACC,WAAP,GAAqB,CADR;AAErBC,EAAAA,KAAK,EAAEF,MAAM,CAACG,UAAP,GAAoB;AAFN,CAAzB;;AAKA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AAAA;;AACpB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACoB,EAAD,EAAKC,KAAL,IAAcrB,QAAQ,CAAC,EAAD,CAA5B;AACA,QAAM,CAACsB,MAAD,EAASC,SAAT,IAAsBvB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAMwB,SAAS,GAAGzB,MAAM,EAAxB;AACA,QAAM0B,SAAS,GAAG1B,MAAM,EAAxB;AACA,QAAM2B,QAAQ,GAAG3B,MAAM,CAAC,EAAD,CAAvB;AACA,QAAM4B,QAAQ,GAAGvB,WAAW,GAAGwB,MAA/B;AAEA,QAAMC,MAAM,GAAGC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoCxB,WAApC,CAAf,CAToB,CAWpB;AAEA;AAEA;AACA;AAEA;AAEI;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ;AAER;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AAIA,sBACI,QAAC,SAAD;AAAA,4BACI;AAAO,MAAA,GAAG,EAAEyB,MAAZ;AAAqB,MAAA,QAAQ;AAA7B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,MACbH,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAACE,QAAAA,KAAK,EAAE,IAAR;AAAczB,QAAAA,KAAK,EAAE;AAArB,OAApC,EACC0B,IADD,CACOC,WAAD,IAAiB;AACvBH,QAAAA,MAAM,CAACI,OAAP,CAAeC,SAAf,GAA2BF,WAA3B;;AACAH,QAAAA,MAAM,CAACI,OAAP,CAAeE,gBAAf,GAAkC,UAASC,CAAT,EAAY;AAC9CP,UAAAA,MAAM,CAACI,OAAP,CAAeI,IAAf;AACC,SAFD;AAGC,OAND,CADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,CAnFD;;GAAMzB,I;UAOeZ,W;;;MAPfY,I;AAqFN,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport styled from \"styled-components\";\nimport { useLocation } from \"react-router-dom\";\nimport queryString from 'query-string';\n\n\nconst Container = styled.div`\n    padding: 20px;\n    display: flex;\n    height: 100vh;\n    width: 90%;\n    margin: auto;\n    flex-wrap: wrap;\n`;\nconst CONSTRAINTS = { video: true };\n\n\n// const Video = (props) => {\n//     const ref = useRef();\n\n//     useEffect(() => {\n//         props.peer.on(\"stream\", stream => {\n//             ref.current.srcObject = stream;\n//         })\n//     }, []);\n\n//     return (\n//         <StyledVideo playsInline autoPlay ref={ref} />\n//     );\n// }\n\n\nconst videoConstraints = {\n    height: window.innerHeight / 2,\n    width: window.innerWidth / 2\n};\n\nconst Room = (props) => {\n    const [peers, setPeers] = useState([]);\n    const [id, setID] = useState('');\n    const [roomID, setRoomID] = useState('');\n    const socketRef = useRef();\n    const userVideo = useRef();\n    const peersRef = useRef([]);\n    const location = useLocation().search;\n\n    const stream = navigator.mediaDevices.getUserMedia(CONSTRAINTS);\n\n    // const roomID = queryString.parse(location);\n\n    // const roomID = 1234;\n\n    // useEffect(() => {\n    //     const {id, roomID} = queryString.parse(location);\n\n    //     socketRef.current = io.connect(\"/\");\n\n        // navigator.mediaDevices.getUserMedia({ video: videoConstraints, audio: true }).then(stream => {\n        //     userVideo.current.srcObject = stream;\n    //         socketRef.current.emit(\"join room\", {id, roomID});\n    //         socketRef.current.on(\"all users\", users => {\n    //             const peers = [];\n    //             users.forEach(userID => {\n    //                 const peer = createPeer(userID, socketRef.current.id, stream);\n    //                 peersRef.current.push({\n    //                     peerID: userID,\n    //                     peer,\n    //                 })\n    //                 peers.push(peer);\n    //             })\n    //             setPeers(peers);\n            // })\n\n    //         socketRef.current.on(\"user joined\", payload => {\n    //             const peer = addPeer(payload.signal, payload.callerID, stream);\n    //             peersRef.current.push({\n    //                 peerID: payload.callerID,\n    //                 peer,\n    //             })\n\n    //             setPeers(users => [...users, peer]);\n    //         });\n\n    //         socketRef.current.on(\"receiving returned signal\", payload => {\n    //             const item = peersRef.current.find(p => p.peerID === payload.id);\n    //             item.peer.signal(payload.signal);\n    //         });\n    //     })\n    // }, []);\n\n    // function createPeer(userToSignal, callerID, stream) {\n    //     const peer = new Peer({\n    //         initiator: true,\n    //         trickle: false,\n    //         stream,\n    //     });\n\n    //     peer.on(\"signal\", signal => {\n    //         socketRef.current.emit(\"sending signal\", { userToSignal, callerID, signal })\n    //     })\n\n    //     return peer;\n    // }\n\n\n\n    return (\n        <Container>\n            <video ref={videos}  autoPlay ></video>\n            <Button onClick={() => \n                navigator.mediaDevices.getUserMedia({audio: true, video: true})\n                .then((mediaStream) => {\n                videos.current.srcObject = mediaStream;\n                videos.current.onloadedmetadata = function(e) {\n                videos.current.play();\n                };\n                }\n                )}>Record</Button>\n        </Container>\n    );\n};\n\nexport default Room;"]},"metadata":{},"sourceType":"module"}