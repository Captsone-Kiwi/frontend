{"ast":null,"code":"// Generated by CoffeeScript 1.10.0\nvar feedback, matching, scoring, time, time_estimates, zxcvbn;\nmatching = require('./matching');\nscoring = require('./scoring');\ntime_estimates = require('./time_estimates');\nfeedback = require('./feedback');\n\ntime = function () {\n  return new Date().getTime();\n};\n\nzxcvbn = function (password, user_inputs) {\n  var arg, attack_times, i, len, matches, prop, ref, result, sanitized_inputs, start, val;\n\n  if (user_inputs == null) {\n    user_inputs = [];\n  }\n\n  start = time();\n  sanitized_inputs = [];\n\n  for (i = 0, len = user_inputs.length; i < len; i++) {\n    arg = user_inputs[i];\n\n    if ((ref = typeof arg) === \"string\" || ref === \"number\" || ref === \"boolean\") {\n      sanitized_inputs.push(arg.toString().toLowerCase());\n    }\n  }\n\n  matching.set_user_input_dictionary(sanitized_inputs);\n  matches = matching.omnimatch(password);\n  result = scoring.most_guessable_match_sequence(password, matches);\n  result.calc_time = time() - start;\n  attack_times = time_estimates.estimate_attack_times(result.guesses);\n\n  for (prop in attack_times) {\n    val = attack_times[prop];\n    result[prop] = val;\n  }\n\n  result.feedback = feedback.get_feedback(result.score, result.sequence);\n  return result;\n};\n\nmodule.exports = zxcvbn;","map":{"version":3,"mappings":";AAAA;AAAAA,WAAWC,QAAQ,YAAR,CAAX;AACAC,UAAUD,QAAQ,WAAR,CAAV;AACAE,iBAAiBF,QAAQ,kBAAR,CAAjB;AACAG,WAAWH,QAAQ,YAAR,CAAX;;AAEAI,OAAO;SAAQ,UAAL,CAAaC,OAAb;AAAH,CAAP;;AAEAC,SAAS,UAACC,QAAD,EAAWC,WAAX;AACP;;;AADkBA,kBAAc,EAAd;;;AAClBC,UAAQL,MAAR;AAEAM,qBAAmB,EAAnB;;AACA;;;AACE,eAAG,OAAOC,GAAV,MAAkB,QAAlB,IAAGC,QAAyB,QAA5B,IAAGA,QAAmC,SAAtC;AACEF,sBAAgB,CAACG,IAAjB,CAAsBF,GAAG,CAACG,QAAJ,GAAeC,WAAf,EAAtB;;AAFJ;;AAGAhB,UAAQ,CAACiB,yBAAT,CAAmCN,gBAAnC;AACAO,YAAUlB,QAAQ,CAACmB,SAAT,CAAmBX,QAAnB,CAAV;AACAY,WAASlB,OAAO,CAACmB,6BAAR,CAAsCb,QAAtC,EAAgDU,OAAhD,CAAT;AACAE,QAAM,CAACE,SAAP,GAAmBjB,SAASK,KAA5B;AACAa,iBAAepB,cAAc,CAACqB,qBAAf,CAAqCJ,MAAM,CAACK,OAA5C,CAAf;;AACA;;AACEL,UAAO,MAAP,GAAeM,GAAf;AADF;;AAEAN,QAAM,CAAChB,QAAP,GAAkBA,QAAQ,CAACuB,YAAT,CAAsBP,MAAM,CAACQ,KAA7B,EAAoCR,MAAM,CAACS,QAA3C,CAAlB;SACAT;AAfO,CAAT;;AAiBAU,MAAM,CAACC,OAAP,GAAiBxB,MAAjB","names":["matching","require","scoring","time_estimates","feedback","time","getTime","zxcvbn","password","user_inputs","start","sanitized_inputs","arg","ref","push","toString","toLowerCase","set_user_input_dictionary","matches","omnimatch","result","most_guessable_match_sequence","calc_time","attack_times","estimate_attack_times","guesses","val","get_feedback","score","sequence","module","exports"],"sources":["/Users/100s/Documents/GitHub/frontend/node_modules/zxcvbn/src/main.coffee"],"sourcesContent":["matching = require './matching'\nscoring = require './scoring'\ntime_estimates = require './time_estimates'\nfeedback = require './feedback'\n\ntime = -> (new Date()).getTime()\n\nzxcvbn = (password, user_inputs = []) ->\n  start = time()\n  # reset the user inputs matcher on a per-request basis to keep things stateless\n  sanitized_inputs = []\n  for arg in user_inputs\n    if typeof arg in [\"string\", \"number\", \"boolean\"]\n      sanitized_inputs.push arg.toString().toLowerCase()\n  matching.set_user_input_dictionary sanitized_inputs\n  matches = matching.omnimatch password\n  result = scoring.most_guessable_match_sequence password, matches\n  result.calc_time = time() - start\n  attack_times = time_estimates.estimate_attack_times result.guesses\n  for prop, val of attack_times\n    result[prop] = val\n  result.feedback = feedback.get_feedback result.score, result.sequence\n  result\n\nmodule.exports = zxcvbn\n"]},"metadata":{},"sourceType":"script"}