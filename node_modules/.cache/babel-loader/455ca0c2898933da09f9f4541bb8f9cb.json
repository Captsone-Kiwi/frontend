{"ast":null,"code":"var _jsxFileName = \"/Users/kimchanmi/Capstone-Kiwi/frontend/src/store.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState } from \"react\"; // Context에서 관리해줄 상태값과 메소드들을 정의\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({\n  state: {\n    userInfo: {},\n    logged: false\n  },\n  actions: {\n    setUserInfo: () => {},\n    setLoginState: () => {}\n  }\n}); // Provider를 rendering하면서 상태값과 메소드들을 전달\n\nconst AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [userInfo, setUserInfo] = useState({});\n  const [logged, setLoginState] = useState(false);\n  const value = {\n    state: {\n      userInfo,\n      logged\n    },\n    actions: {\n      setUserInfo,\n      setLoginState\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: [value.state, value.actions],\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"TuGpUqD4DXa5yemSHEbB/jI0I2Y=\");\n\n_c = AuthProvider;\nconst AuthConsumer = AuthContext.Consumer;\nexport { AuthProvider, AuthConsumer };\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/kimchanmi/Capstone-Kiwi/frontend/src/store.js"],"names":["React","createContext","useState","AuthContext","state","userInfo","logged","actions","setUserInfo","setLoginState","AuthProvider","children","value","AuthConsumer","Consumer"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C,C,CAEA;;;AACA,MAAMC,WAAW,gBAAGF,aAAa,CAAC;AAChCG,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE,EADL;AAELC,IAAAA,MAAM,EAAE;AAFH,GADyB;AAKhCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,WAAW,EAAE,MAAM,CAAE,CADd;AAEPC,IAAAA,aAAa,EAAE,MAAM,CAAE;AAFhB;AALuB,CAAD,CAAjC,C,CAWA;;AACA,MAAMC,YAAY,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACrC,QAAM,CAACN,QAAD,EAAWG,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACI,MAAD,EAASG,aAAT,IAA0BP,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAMU,KAAK,GAAG;AACZR,IAAAA,KAAK,EAAE;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KADK;AAEZC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf;AAFG,GAAd;AAIA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE,CAACG,KAAK,CAACR,KAAP,EAAcQ,KAAK,CAACL,OAApB,CAA7B;AAAA,cACGI;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAZD;;GAAMD,Y;;KAAAA,Y;AAaN,MAAMG,YAAY,GAAGV,WAAW,CAACW,QAAjC;AACA,SAASJ,YAAT,EAAuBG,YAAvB;AACA,eAAeV,WAAf","sourcesContent":["import React, { createContext, useState } from \"react\";\n\n// Context에서 관리해줄 상태값과 메소드들을 정의\nconst AuthContext = createContext({\n  state: {\n    userInfo: {},\n    logged: false,\n  },\n  actions: {\n    setUserInfo: () => {},\n    setLoginState: () => {},\n  },\n});\n\n// Provider를 rendering하면서 상태값과 메소드들을 전달\nconst AuthProvider = ({ children }) => {\n  const [userInfo, setUserInfo] = useState({});\n  const [logged, setLoginState] = useState(false);\n  const value = {\n    state: { userInfo, logged },\n    actions: { setUserInfo, setLoginState },\n  };\n  return (\n    <AuthContext.Provider value={[value.state, value.actions]}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\nconst AuthConsumer = AuthContext.Consumer;\nexport { AuthProvider, AuthConsumer };\nexport default AuthContext;\n"]},"metadata":{},"sourceType":"module"}